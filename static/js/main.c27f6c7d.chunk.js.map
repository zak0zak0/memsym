{"version":3,"sources":["components/memcontext.js","memsym-lang/token.js","memsym-lang/lexer.js","memsym-lang/nodes/declaration.js","memsym-lang/nodes/base.js","common/data-type.js","common/utils.js","memsym-lang/parser.js","memsym/interpreter.js","components/help/declare.js","components/help/types.js","components/help/interpreterHelp.js","components/interpreterView.js","components/inputCard.js","components/stackView.js","components/clear-memory-button.js","memsym/record.js","memsym/stack.js","memsym/heap.js","memsym/memsym.js","logo_memsym.svg","components/heapView.js","App.js","reportWebVitals.js","index.js"],"names":["MemContext","React","createContext","MemProvider","memsym","children","useState","setX","Provider","value","records","heapData","onUpdate","x","Token","type","this","tokenType","TYPE","NAME","EQUAL","NUMBER","CHAR","STRING","BOOL","digitRegex","startCharRegex","nameCharRegex","spaceRegex","typeRegex","boolRegex","tt","LexerError","char","pos","name","Error","Lexer","line","i","tokens","length","test","readNumber","index","number","push","readName","readString","string","readChar","symbol","nextChar","result","nodeName","DeclarationNode","DataType","NULL","INT","toByteString","buffer","ArrayBuffer","arr","Uint8Array","toString","padStart","parseDataType","typeName","dataTypeKey","Object","keys","find","toLowerCase","ParserError","token","declarationTypeValueMap","Parser","parseDeclaration","Interpreter","lexer","parser","lines","nodes","parse","node","e","checkNode","forEach","handleNode","declare","label","Declare","Types","helpPages","InterpreterHelp","show","handleClose","page","setPage","Modal","onHide","Header","closeButton","Title","Body","Footer","className","Paginator","active","onChange","amount","Button","size","variant","onClick","items","Pagination","Item","InterpreterView","textFb","valid","setValid","message","setMessage","setError","useFeedback","text","setText","setShow","useContext","interpreterRef","useRef","Form","FormGroup","Label","Control","as","rows","isInvalid","target","Feedback","split","interpreter","current","run","InputCard","Card","Component","StackView","renderBody","Table","bordered","map","r","renderBin","dataType","renderType","charCodeAt","Consumer","ClearMemoryButton","clear","Record","Stack","initialize","record","found","Heap","Array","fill","mem","join","findFreeIndex","alert","MemSym","alloc","data","HeapView","rowsCount","Math","floor","to2DimArray","header","from","c","renderCell","renderCellValue","tooltipValue","OverlayTrigger","overlay","Tooltip","colsCount","row","cols","col","item","App","Container","Navbar","bg","Brand","alt","src","Logo","width","height","Text","packageJson","version","Row","Col","xs","sm","md","lg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c27f6c7d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport const MemContext = React.createContext();\r\n\r\nexport function MemProvider({ memsym, children }) {\r\n    const [, setX] = useState(0);\r\n\r\n    const onUpdate = () => {\r\n        setX(x => x > 0 ? 0 : 1);\r\n    }\r\n\r\n    return (\r\n        <MemContext.Provider value={{ memsym, records: memsym.records, heapData: memsym.heapData, onUpdate }}>\r\n            {children}\r\n        </MemContext.Provider>\r\n    );\r\n}","export class Token {\r\n    constructor(type, value) {\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.type}:${this.value}`;\r\n    }\r\n}\r\n\r\nexport const tokenType = {\r\n    TYPE: 'type', // int|char|bool|string\r\n    NAME: 'name', // identifier\r\n    EQUAL: 'equal', // =\r\n    NUMBER: 'number', // -?\\d+\r\n    CHAR: 'char', // single char, should be declared in single quotes\r\n    STRING: 'string', // string, should be declared in double quotes\r\n    BOOL: 'bool', // true|false\r\n}","import { Token, tokenType } from './token';\r\n\r\nconst digitRegex = /^\\d$/;\r\nconst minus = '-';\r\nconst startCharRegex = /^[_a-zA-Z]$/\r\nconst nameCharRegex = /^[_a-zA-Z0-9]$/\r\nconst equal = '=';\r\nconst spaceRegex = /^\\s$/;\r\nconst typeRegex = /^(int|char|bool|string)$/i;\r\nconst boolRegex = /^(true|false)$/i;\r\nconst doubleQuote = '\"';\r\nconst singleQuote = \"'\";\r\n\r\nconst tt = tokenType;\r\n\r\nexport class LexerError extends Error {\r\n    constructor(char, pos) {\r\n        super(`Unexpected char \"${char}\" at position #${pos}`);\r\n        this.name = \"LexerError\";\r\n    }\r\n}\r\n\r\nexport class Lexer {\r\n    parse(line) {\r\n        let i = 0;\r\n        const tokens = [];\r\n        while (i < line.length) {\r\n            while (i < line.length && spaceRegex.test(line[i])) {\r\n                i++;\r\n            }\r\n            if (i >= line.length) {\r\n                break;\r\n            }\r\n            const char = line[i];\r\n            if (char === equal) {\r\n                tokens.push(new Token(tt.EQUAL, char));\r\n                i++;\r\n                continue;\r\n            }\r\n            if (char === minus) {\r\n                i++;\r\n                const nextChar = line[i];\r\n                if (!digitRegex.test(nextChar)) {\r\n                    throw new LexerError(nextChar, i);\r\n                }\r\n                const [index, number] = this.readNumber(line, i);\r\n                tokens.push(new Token(tt.NUMBER, -number));\r\n                i = index;\r\n                continue;\r\n            }\r\n            if (digitRegex.test(char)) {\r\n                const [index, number] = this.readNumber(line, i);\r\n                tokens.push(new Token(tt.NUMBER, number));\r\n                i = index;\r\n                continue;\r\n            }\r\n            if (startCharRegex.test(char)) {\r\n                const [index, nameRest] = this.readName(line, i + 1);\r\n                const name = char + nameRest;\r\n                if (typeRegex.test(name)) {\r\n                    tokens.push(new Token(tt.TYPE, name));\r\n                } else if (boolRegex.test(name)) {\r\n                    tokens.push(new Token(tt.BOOL, name));\r\n                } else {\r\n                    tokens.push(new Token(tt.NAME, name));\r\n                }\r\n                i = index;\r\n                continue;\r\n            }\r\n            if (char === singleQuote) {\r\n                const [index, symbol] = this.readChar(line, i);\r\n                i = index;\r\n                tokens.push(new Token(tt.CHAR, symbol));\r\n                continue;\r\n            }\r\n            if (char === doubleQuote) {\r\n                const [index, string] = this.readString(line, i + 1);\r\n                i = index;\r\n                tokens.push(new Token(tt.STRING, string));\r\n                continue;\r\n            }\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    readString(line, i) {\r\n        let result = '';\r\n        while (i < line.length && line[i] !== doubleQuote) {\r\n            result += line[i];\r\n            i++;\r\n        }\r\n        if (i >= line.length || line[i] !== doubleQuote) {\r\n            throw new LexerError(line[i], i);\r\n        }\r\n        return [i + 1, result];\r\n    }\r\n\r\n    readChar(line, i) {\r\n        if (i + 1 >= line.length) {\r\n            throw new LexerError(line[i], i);\r\n        }\r\n        const symbol = line[i + 1];\r\n        if (i + 2 >= line.length) {\r\n            throw new LexerError(symbol, i + 1);\r\n        }\r\n        if (line[i + 2] !== singleQuote) {\r\n            throw new LexerError(line[i + 2], i + 2);\r\n        }\r\n        return [i + 3, symbol];\r\n    }\r\n\r\n    readName(line, i) {\r\n        let result = '';\r\n        while (i < line.length && nameCharRegex.test(line[i])) {\r\n            result += line[i];\r\n            i++;\r\n        }\r\n        return [i, result];\r\n    }\r\n\r\n    readNumber(line, i) {\r\n        let result = '';\r\n        while (i < line.length && digitRegex.test(line[i])) {\r\n            result += line[i];\r\n            i++;\r\n        }\r\n        if (i < line.length) {\r\n            if (nameCharRegex.test(line[i])) {\r\n                throw new LexerError(line[i], i);\r\n            }\r\n        }\r\n        return [i, +result];\r\n    }\r\n}","import { BaseNode } from \"./base\";\r\n\r\nconst nodeName = \"DeclarationNode\";\r\n\r\nexport class DeclarationNode extends BaseNode {    \r\n    constructor(type, name, value) {\r\n        super(nodeName);\r\n        this.name = name;\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nDeclarationNode.nodeName = nodeName;","export class BaseNode {\r\n    constructor(nodeName) {\r\n        this.nodeName = nodeName;\r\n    }\r\n}","export const DataType = {\r\n    NULL: 0,\r\n    INT: 1,\r\n    BOOL: 2,\r\n    CHAR: 3,\r\n    STRING: 4,    \r\n}","import { useState } from 'react';\r\nimport { DataType } from './data-type';\r\n\r\nexport function toByteString(value) {\r\n  const buffer = new ArrayBuffer(1);\r\n  const arr = new Uint8Array(buffer);\r\n  arr[0] = +value;\r\n  const normValue = arr[0];\r\n  return normValue.toString(2).padStart(8, '0');\r\n}\r\n\r\nexport function parseDataType(typeName) {\r\n  const dataTypeKey = Object.keys(DataType).find(x => x.toLowerCase() === typeName.toLowerCase());\r\n  return DataType[dataTypeKey];\r\n}\r\n\r\nexport function useFeedback() {\r\n  const [valid, setValid] = useState(true);\r\n  const [message, setMessage] = useState('');\r\n  const setError = message => {\r\n    setValid(!message);\r\n    setMessage(message);\r\n  };\r\n\r\n  return {\r\n    valid,\r\n    message,\r\n    setError\r\n  }\r\n}","import { tokenType } from \"./token\";\r\nimport { DeclarationNode } from './nodes/declaration';\r\nimport { DataType } from \"../common/data-type\";\r\nimport { parseDataType } from '../common/utils';\r\n\r\nexport class ParserError extends Error {\r\n    constructor(token) {\r\n        super(`Unexpected token [${token}]`);\r\n        this.name = \"ParserError\";\r\n    }\r\n}\r\n\r\nconst tt = tokenType;\r\n\r\nconst declarationTypeValueMap = {\r\n    [DataType.INT]: tt.NUMBER,\r\n    [DataType.CHAR]: tt.CHAR,\r\n    [DataType.STRING]: tt.STRING,\r\n    [DataType.BOOL]: tt.BOOL,\r\n};\r\n\r\nexport class Parser {\r\n    parse(tokens) {\r\n        if (!tokens?.length) {\r\n            return null;\r\n        }\r\n        const token = tokens[0];\r\n        if (token.type === tokenType.TYPE) {\r\n            return this.parseDeclaration(tokens);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    parseDeclaration(tokens) {\r\n        const type = tokens[0].value;        \r\n        if (tokens[1]?.type !== tokenType.NAME) {\r\n            throw new ParserError(tokens[1]);\r\n        }\r\n        const name = tokens[1].value;\r\n        if (tokens[2]?.type !== tokenType.EQUAL) {\r\n            throw new ParserError(tokens[2]);\r\n        }\r\n        if (declarationTypeValueMap[parseDataType(type)] !== tokens[3].type) {\r\n            throw new ParserError(tokens[3]);\r\n        }\r\n        const value = tokens[3].value;\r\n        return new DeclarationNode(type, name, value);\r\n    }\r\n}","import { Lexer } from '../memsym-lang/lexer';\r\nimport { Parser } from '../memsym-lang/parser';\r\nimport { DeclarationNode } from \"../memsym-lang/nodes/declaration\";\r\nimport { parseDataType } from '../common/utils';\r\nimport { DataType } from '../common/data-type';\r\n\r\nexport class Interpreter {\r\n    #names = [];\r\n\r\n    constructor(memsym, onUpdate) {\r\n        this.memsym = memsym;\r\n        this.onUpdate = onUpdate;\r\n        this.lexer = new Lexer();\r\n        this.parser = new Parser();\r\n    }\r\n\r\n    run(lines) {\r\n        const nodes = [];\r\n        this.#names = [];\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i];\r\n            try {\r\n                const tokens = this.lexer.parse(line);\r\n                if (!tokens?.length) {\r\n                    continue;\r\n                }\r\n                const node = this.parser.parse(tokens);\r\n                nodes.push(node);\r\n            } catch (e) {\r\n                throw new Error(`Error at line ${i + 1}:\\n ${e}`);\r\n            }\r\n        }\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            try {\r\n                this.checkNode(nodes[i]);\r\n            } catch (e) {\r\n                throw new Error(`Error at line ${i + 1}:\\n ${e}`);\r\n            }\r\n        }\r\n        nodes.forEach(node => {\r\n            this.handleNode(node);\r\n        })        \r\n        this.onUpdate();\r\n    }\r\n\r\n    handleNode(node) {\r\n        if (node.nodeName === DeclarationNode.nodeName) {\r\n            const { type, name, value } = node;\r\n            this.memsym.declare(parseDataType(type), name, value);\r\n        }\r\n    }\r\n\r\n    checkNode(node) {\r\n        if (node.nodeName === DeclarationNode.nodeName) {\r\n            const { type, name, value } = node;\r\n            if (this.#names.find(x => x === name) || this.memsym.records.find(x => x.label === name)) {              \r\n                throw new Error(`Name '${name}' is already declared`);\r\n            }\r\n            const parsedType = parseDataType(type);\r\n            if (parsedType === DataType.INT && (+value < -128 || +value > 127)) {\r\n                throw new Error(`Value ${value} is out of range [-128; 127]`);\r\n            }\r\n            this.#names.push(name);\r\n        }\r\n    }\r\n}","export function Declare() {\r\n    return (\r\n        <>\r\n            <h5>Declare a variable</h5>\r\n            <p>\r\n                format: <br />\r\n                <code>\r\n                    &lt;TYPE&gt; &lt;NAME&gt; = &lt;VALUE&gt;\r\n                    <br />\r\n                </code>\r\n            </p>\r\n            <p>\r\n                examples: <br />\r\n                <code>\r\n                    int a = 34<br />\r\n                    string b = \"abcdef1\"<br />\r\n                </code>\r\n            </p>\r\n        </>\r\n    )\r\n}","export function Types() {\r\n    return (\r\n        <>\r\n            <h5>Available types</h5>\r\n            <p>\r\n                <ul>\r\n                    <li><b>int</b> - an integer number in range [-128; 127]</li>\r\n                    <li><b>bool</b> - a boolean value <b><i>true</i></b> or <b><i>false</i></b></li>\r\n                    <li><b>char</b> - a single symbol in single quotes (like 'a')</li>\r\n                    <li><b>string</b> - a string in double quotes (like \"abc\")</li>\r\n                </ul>\r\n            </p>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Modal, Button, Pagination } from 'react-bootstrap';\r\nimport { Declare } from './declare';\r\nimport { Types } from './types';\r\n\r\nconst helpPages = [\r\n    <Declare />, <Types />\r\n]\r\n\r\nexport function InterpreterHelp({ show, handleClose }) {\r\n    const [page, setPage] = useState(1);\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose} >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Interpreter Help</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {helpPages[page - 1]}\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"justify-content-between\">\r\n                <Paginator active={page} onChange={x => setPage(x)} amount={helpPages.length} />\r\n                <Button size=\"sm\" variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nfunction Paginator({ active, onChange, amount }) {\r\n    const items = [];\r\n    for (let number = 1; number <= amount; number++) {\r\n        items.push(\r\n            <Pagination.Item key={number} active={number === active} onClick={() => onChange(number)}>\r\n                {number}\r\n            </Pagination.Item>,\r\n        );\r\n    }\r\n    return (\r\n        <Pagination size=\"sm\">\r\n            {items}\r\n        </Pagination>\r\n    )\r\n}","import React, { useContext, useState, useRef } from \"react\";\r\nimport { FormGroup, Button, Form } from 'react-bootstrap';\r\nimport { Interpreter } from \"../memsym/interpreter\";\r\nimport { useFeedback } from \"../common/utils\";\r\nimport { InterpreterHelp } from './help/interpreterHelp';\r\nimport { MemContext } from \"./memcontext\";\r\n\r\nexport function InterpreterView() {\r\n    const textFb = useFeedback();   \r\n    const [text, setText] = useState('');\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const { memsym, onUpdate } = useContext(MemContext);\r\n    const interpreterRef = useRef(new Interpreter(memsym, onUpdate))\r\n\r\n    const onClick = () => {\r\n        const lines = text.split('\\n');\r\n        const interpreter = interpreterRef.current;\r\n        try {\r\n            interpreter.run(lines);\r\n            textFb.setError(null);\r\n        } catch (e) {\r\n            textFb.setError(e.message);\r\n        }                \r\n    }\r\n\r\n    const onTextChange = e => {\r\n        setText(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <Form>\r\n            <FormGroup>\r\n                <Form.Label>Input a script and click the Run button</Form.Label>\r\n                <Form.Control size=\"sm\" as=\"textarea\" rows={5} isInvalid={!textFb.valid} value={text} onChange={onTextChange} />\r\n                <Form.Control.Feedback type=\"invalid\">{textFb.message}</Form.Control.Feedback>\r\n            </FormGroup>\r\n            <Button size=\"sm\" variant=\"primary\" type=\"button\" onClick={onClick}>Run</Button> {' '}           \r\n            <Button size=\"sm\" variant=\"link\" type=\"button\" onClick={handleShow}>Help</Button>\r\n            <InterpreterHelp show={show} handleClose={handleClose} />\r\n        </Form>\r\n    );\r\n}","import React from \"react\";\r\nimport { Card } from 'react-bootstrap';\r\nimport { InterpreterView } from './interpreterView';\r\n\r\nexport class InputCard extends React.Component {\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <Card.Body>\r\n                    <Card.Title>Interpreter</Card.Title>\r\n                    <InterpreterView />\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { DataType } from \"../common/data-type\";\r\nimport { MemContext } from \"./memcontext\";\r\nimport { toByteString } from '../common/utils';\r\n\r\nexport class StackView extends React.Component {\r\n    render() {\r\n        return (\r\n            <MemContext.Consumer>\r\n                {this.renderBody}\r\n            </MemContext.Consumer>\r\n        );\r\n    }\r\n\r\n    renderBody = ({ records }) => {\r\n        return (\r\n            <Table bordered size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>bin</th>\r\n                        <th>value</th>\r\n                        <th>label</th>\r\n                        <th>type</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {records.map((r, i) => (\r\n                        <tr key={i}>\r\n                            <td>{i}</td>\r\n                            <td>{this.renderBin(r.dataType, r.value)}</td>\r\n                            <td>{r.value}</td>\r\n                            <td>{r.label}</td>\r\n                            <td>{this.renderType(r.dataType)}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    renderBin = (dataType, value) => {\r\n        if (dataType === DataType.CHAR) {\r\n            value = value.charCodeAt(0);\r\n        }\r\n        if (dataType === DataType.BOOL) {\r\n            value = value === \"true\" ? 1 : 0;\r\n        }\r\n        return toByteString(value);\r\n    }\r\n\r\n    renderType = (type) => {\r\n        switch (+type) {\r\n            case DataType.INT:\r\n                return 'int';\r\n            case DataType.BOOL:\r\n                return 'bool';\r\n            case DataType.CHAR:\r\n                return 'char';\r\n            case DataType.STRING:\r\n                return 'string';\r\n            case DataType.NULL:\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n\r\n}","import { useContext } from \"react\"\r\nimport { MemContext } from './memcontext';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport function ClearMemoryButton() {\r\n    const { memsym, onUpdate } = useContext(MemContext);\r\n    const onClick = () => {\r\n        memsym.clear();\r\n        onUpdate();\r\n    }\r\n    return (<Button variant=\"outline-danger\" onClick={onClick}>Clear memory</Button>)\r\n}","export class Record {\r\n    constructor(dataType, label, value) {\r\n        this.dataType = dataType;\r\n        this.label = label;\r\n        this.value = value;\r\n    }\r\n}","import { DataType } from \"../common/data-type\";\r\nimport { Record } from \"./record\";\r\n\r\nexport class Stack {\r\n    #records;\r\n\r\n    constructor(size = 8) {\r\n        this.size = size;\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        const records = [];\r\n        for (let i = 0; i < this.size; i++) {\r\n            records.push(new Record(DataType.NULL, null, 0));\r\n        }\r\n        this.#records = records;\r\n    }\r\n\r\n    get records() { \r\n        return [...this.#records]\r\n    }\r\n\r\n    clear() {\r\n        this.initialize();\r\n    }\r\n\r\n    push(record) {\r\n        let index = 0;\r\n        let found = false;\r\n        const records = this.#records;\r\n\r\n        while (!found && index < records.length) {\r\n            if (records[index].dataType === DataType.NULL) {\r\n                found = true;\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n        if (!found) {\r\n            records.push(record);\r\n        } else {\r\n            records[index] = record;\r\n        }\r\n    }\r\n}","export class Heap {\r\n    // printable chars /[\\x00-\\x08\\x0E-\\x1F]/.test(data)\r\n    #memory;\r\n\r\n    constructor(size = 64) {\r\n        this.size = size;\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        this.#memory = Array(this.size).fill(0);\r\n    }\r\n\r\n    clear() {\r\n        this.initialize();\r\n    }\r\n\r\n    get data() {\r\n        return [...this.#memory];\r\n    }\r\n\r\n    read(index) {\r\n        const mem = this.#memory;\r\n        if (index >= mem.length) {\r\n            return '';\r\n        }\r\n        if (mem[index] === 0) {\r\n            return '.';\r\n        }\r\n        const result = [];        \r\n        let i = 0;\r\n        while (i + index < mem.length && mem[i + index] !== 0) {\r\n            result[i] = mem[i + index];\r\n            i++;\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    alloc(value) {\r\n        if (typeof value !== \"string\") {\r\n            alert('Unable to allocate non-string value');\r\n            return;\r\n        }\r\n        const length = value.length;\r\n        if (!length) {\r\n            return -1;\r\n        }\r\n        const mem = this.#memory;\r\n        const index = this.findFreeIndex(length);\r\n        if (index === -1) {\r\n            return -1;\r\n        }\r\n        for (let i = 0; i < length; i++) {\r\n            mem[i + index] = value[i];\r\n        }\r\n        return index;\r\n    }\r\n\r\n    findFreeIndex(length) {\r\n        let i = 0;\r\n        const mem = this.#memory;\r\n        while (i < this.size) {\r\n            let current = i;\r\n            if (mem[i] === 0) {\r\n                while (current < this.size && current - i < length && mem[current] === 0) {\r\n                    current++;\r\n                }\r\n                if (current === this.size) {\r\n                    return -1;\r\n                }\r\n                if (current - i < length || mem[current] !== 0) {\r\n                    i = current + 1;\r\n                    continue;\r\n                }                \r\n                return i > 0 ? i + 1 : i;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n}","import { DataType } from \"../common/data-type\";\r\nimport { Record } from \"./record\";\r\nimport { Stack } from \"./stack\";\r\nimport { Heap } from \"./heap\";\r\n\r\nexport class MemSym {\r\n    #stack;\r\n\r\n    #heap;\r\n\r\n    constructor() {\r\n        this.#stack = new Stack();\r\n        this.#heap = new Heap();\r\n    }\r\n\r\n    clear() {\r\n        this.#stack.clear();\r\n        this.#heap.clear();\r\n    }\r\n\r\n    declare(dataType, label, value) {\r\n        if (+dataType === DataType.CHAR) {\r\n            value = value[0];\r\n        }\r\n        if (+dataType === DataType.STRING) {\r\n            value = this.#heap.alloc(value);\r\n            if (value === -1) {\r\n                alert('failed to alloc value');\r\n                return;\r\n            }\r\n        }\r\n\r\n        const record = new Record(+dataType, label, value);\r\n\r\n        this.#stack.push(record);\r\n    }\r\n\r\n    get records() {\r\n        return this.#stack.records;\r\n    }\r\n\r\n    get heapData() {\r\n        return this.#heap.data;\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/logo_memsym.482cc514.svg\";","import React from \"react\";\r\nimport { Table, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { MemContext } from './memcontext';\r\n\r\nconst colsCount = 8;\r\n\r\nexport class HeapView extends React.Component {\r\n    render() {\r\n        return (\r\n            <MemContext.Consumer>\r\n                {this.renderBody}\r\n            </MemContext.Consumer>\r\n        )\r\n    }\r\n\r\n    renderBody = ({ heapData }) => {\r\n        const rowsCount = Math.floor(heapData.length / colsCount);\r\n        const rows = this.to2DimArray(heapData, rowsCount, colsCount);\r\n        const header = Array.from(Array(colsCount).keys()).map(x => x.toString(2).padStart(3, '0'));\r\n        return (\r\n            <Table bordered size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>#/#</th>\r\n                        {header.map(x => (<th key={x}>{x}</th>))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows.map((r, i) => (\r\n                        <tr key={i}>\r\n                            {r.map((c, i) => this.renderCell(c, i))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    renderCell(value, index) {\r\n        if (index === 0) {\r\n            return (\r\n                <td key={index} className=\"bold\">{this.renderCellValue(value, index)}</td>\r\n            )\r\n        }\r\n        const tooltipValue = typeof value === 'string' ? `'${value}'` : value;\r\n\r\n        return (\r\n            <OverlayTrigger overlay={<Tooltip>{tooltipValue}</Tooltip>}>\r\n                <td key={index} >{this.renderCellValue(value, index)}</td>\r\n            </OverlayTrigger>\r\n        )\r\n    }\r\n\r\n    renderCellValue(value, index) {\r\n        if (index === 0) {\r\n            return value.toString(2).padStart(3, '0');\r\n        }\r\n        if (typeof value === 'string') {\r\n            value = value.charCodeAt(0);\r\n        }\r\n        return value.toString(2).padStart(8, '0');\r\n    }\r\n\r\n    to2DimArray(data, rowsCount, colsCount) {\r\n        const rows = [];\r\n        for (let row = 0; row < rowsCount; row++) {\r\n            const cols = [];\r\n            cols.push(row);\r\n            for (let col = 0; col < colsCount; col++) {\r\n                const item = data[row * colsCount + col];\r\n                cols.push(item);\r\n            }\r\n            rows.push(cols);\r\n        }\r\n        return rows;\r\n    }\r\n}","import './App.css';\r\nimport { MemProvider } from './components/memcontext';\r\nimport { InputCard } from './components/inputCard';\r\nimport { StackView } from './components/stackView';\r\nimport { ClearMemoryButton } from './components/clear-memory-button';\r\nimport { Container, Row, Col, Card, Navbar } from 'react-bootstrap';\r\nimport { MemSym } from './memsym/memsym';\r\nimport packageJson from '../package.json';\r\nimport Logo from './logo_memsym.svg';\r\nimport { HeapView } from './components/heapView';\r\n\r\nconst memsym = new MemSym();\r\n\r\nfunction App() {\r\n  return (\r\n    <MemProvider memsym={memsym}>\r\n      <Container>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand><img\r\n            alt=\"\"\r\n            src={Logo}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n          />{' '} MemSym</Navbar.Brand>\r\n          <Navbar.Text>\r\n            v{packageJson.version}\r\n          </Navbar.Text>\r\n        </Navbar>\r\n        <Row>\r\n          <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\">\r\n            <InputCard />            \r\n          </Col>\r\n          <Col xs=\"12\" sm=\"12\" md=\"8\" lg=\"5\">\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title>\r\n                  Stack <ClearMemoryButton />\r\n                </Card.Title>\r\n                <StackView />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title>Heap</Card.Title>\r\n                <Card.Text>hover over a cell to see the value</Card.Text>\r\n                <HeapView />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </MemProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}