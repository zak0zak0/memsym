{"version":3,"sources":["components/memcontext.js","memsym/data-type.js","memsym/utils.js","memsym/constants.js","components/form.js","memsym/interpreter.js","components/help/declare.js","components/help/interpreterHelp.js","components/interpreterView.js","components/inputCard.js","components/stackView.js","memsym/record.js","memsym/stack.js","memsym/heap.js","memsym/memsym.js","logo_memsym.svg","components/heapView.js","App.js","reportWebVitals.js","index.js"],"names":["MemContext","React","createContext","MemProvider","memsym","children","useState","setX","Provider","value","records","heapData","onUpdate","x","DataType","NULL","INT","BOOL","CHAR","STRING","toByteString","buffer","ArrayBuffer","arr","Uint8Array","toString","padStart","useFeedback","valid","setValid","message","setMessage","setError","nameRegexString","RecordForm","name","setName","type","setType","setValue","useContext","nameFb","valueFb","Form","FormGroup","Label","Control","onChange","e","target","placeholder","isInvalid","Feedback","as","Button","variant","onClick","actual","nameIsOk","find","label","checkIfNameExists","match","RegExp","valueIsOk","length","declare","dataTypes","Object","entries","filter","map","k","join","declareRegex","Interpreter","this","lines","i","line","typeName","varName","skipSpaces","readToken","readValue","dataTypeKey","keys","toLowerCase","index","token","Declare","helpPages","InterpreterHelp","show","handleClose","page","setPage","Modal","onHide","Header","closeButton","Title","Body","Footer","className","Paginator","active","amount","items","number","push","Pagination","Item","InterpreterView","textFb","text","setText","setShow","interpreterRef","useRef","rows","split","current","validate","clear","run","size","InputCard","Tabs","defaultActiveKey","Tab","eventKey","title","Card","renderForm","Badge","renderInterpreter","Component","StackView","renderBody","Table","bordered","r","renderBin","dataType","renderType","charCodeAt","Consumer","Record","Stack","initialize","record","found","Heap","Array","fill","mem","result","findFreeIndex","alert","MemSym","alloc","console","log","data","HeapView","rowsCount","Math","floor","to2DimArray","header","from","c","renderCell","renderCellValue","tooltipValue","OverlayTrigger","overlay","Tooltip","colsCount","row","cols","col","item","App","Container","Navbar","bg","Brand","alt","src","Logo","width","height","Text","packageJson","version","Row","Col","xs","sm","md","lg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ggCAEaA,EAAaC,IAAMC,gBAEzB,SAASC,EAAT,GAA4C,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAClC,EAAiBC,mBAAS,GAAjBC,EAAT,oBAMA,OACI,cAACP,EAAWQ,SAAZ,CAAqBC,MAAO,CAAEL,SAAQM,QAASN,EAAOM,QAASC,SAAUP,EAAOO,SAAUC,SAL7E,WACbL,GAAK,SAAAM,GAAC,OAAIA,EAAI,EAAI,EAAI,OAItB,SACKR,I,4FCbAS,EAAW,CACpBC,KAAM,EACNC,IAAK,EACLC,KAAM,EACNC,KAAM,EACNC,OAAQ,GCHL,SAASC,EAAaX,GACzB,IAAMY,EAAS,IAAIC,YAAY,GACzBC,EAAM,IAAIC,WAAWH,GAG3B,OAFAE,EAAI,IAAMd,EACQc,EAAI,GACLE,SAAS,GAAGC,SAAS,EAAG,KAGtC,SAASC,IACZ,MAA0BrB,oBAAS,GAAnC,mBAAOsB,EAAP,KAAcC,EAAd,KACA,EAA8BvB,mBAAS,IAAvC,mBAAOwB,EAAP,KAAgBC,EAAhB,KAMA,MAAO,CACLH,QACAE,UACAE,SARe,SAAAF,GACfD,GAAUC,GACVC,EAAWD,KCfV,IAAMG,EAAkB,yBCYxB,IAAMC,EAAa,WACxB,MAAwB5B,mBAAS,IAAjC,mBAAO6B,EAAP,KAAaC,EAAb,KACA,EAAwB9B,mBAASQ,EAASE,KAA1C,mBAAOqB,EAAP,KAAaC,EAAb,KACA,EAA0BhC,mBAAS,GAAnC,mBAAOG,EAAP,KAAc8B,EAAd,KAEA,EAA6BC,qBAAWxC,GAAhCI,EAAR,EAAQA,OAAQQ,EAAhB,EAAgBA,SAEV6B,EAASd,IACTe,EAAUf,IAkDhB,OACE,eAACgB,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,cAACD,EAAA,EAAKE,MAAN,oBACA,cAACF,EAAA,EAAKG,QAAN,CAAcrC,MAAO0B,EAAMY,SAAU,SAAAC,GAAC,OAAIZ,EAAQY,EAAEC,OAAOxC,QAAQ0B,KAAK,OAAOE,KAAK,OAAOa,YAAY,QAAQC,WAAYV,EAAOb,QAClI,cAACe,EAAA,EAAKG,QAAQM,SAAd,CAAuBf,KAAK,UAA5B,SACGI,EAAOX,aAGZ,eAACc,EAAA,EAAD,WACE,cAACD,EAAA,EAAKE,MAAN,mBACA,eAACF,EAAA,EAAKG,QAAN,CAAcO,GAAG,SAASlB,KAAK,OAAO1B,MAAO4B,EAAMU,SAAW,SAAAC,GAAC,OAAIV,EAAQU,EAAEC,OAAOxC,QAApF,UACE,wBAAQA,MAAOK,EAASE,IAAxB,iBACA,wBAAQP,MAAOK,EAASI,KAAxB,kBACA,wBAAQT,MAAOK,EAASG,KAAxB,kBACA,wBAAQR,MAAOK,EAASK,OAAxB,0BAGJ,eAACyB,EAAA,EAAD,WACE,cAACD,EAAA,EAAKE,MAAN,qBACER,IAASvB,EAASG,MAClB,eAAC0B,EAAA,EAAKG,QAAN,CAAcO,GAAG,SAASlB,KAAK,QAAQ1B,MAAOA,EAAOsC,SAAW,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOxC,QAAvF,UACE,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,QAAd,uBAGF4B,IAASvB,EAASG,MAClB,qCACE,cAAC0B,EAAA,EAAKG,QAAN,CAAcrC,MAAOA,EAAOsC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOxC,QAAQ0B,KAAK,QAAQE,KAAK,OAAOa,YAAY,QAAQC,WAAYT,EAAQd,QACtI,cAACe,EAAA,EAAKG,QAAQM,SAAd,CAAuBf,KAAK,UAA5B,SACGK,EAAQZ,gBAOjB,cAACwB,EAAA,EAAD,CAAQC,QAAQ,UAAUlB,KAAK,SAASmB,QArF5B,WACd,IAAIC,EAAShD,GACR4B,IAASvB,EAASG,MAAoB,SAAVR,GAA8B,UAAVA,IACnDgD,EAAS,QAGX,IAAIC,GAAW,EAaf,GAZKvB,IACHM,EAAOT,SAAS,qBAChB0B,GAAW,GAETA,GAzBR,SAA2BtD,EAAQ+B,GACjC,QAAS/B,EAAOM,QAAQiD,MAAK,SAAA9C,GAAC,OAAIA,EAAE+C,QAAUzB,KAwB5B0B,CAAkBzD,EAAQ+B,KACxCM,EAAOT,SAAS,4BAChB0B,GAAW,GAETA,IAAavB,EAAK2B,MAAM,IAAIC,OAAJ,WAAe9B,EAAf,SAC1BQ,EAAOT,SAAS,iHAChB0B,GAAW,GAETA,EAAJ,CACEjB,EAAOT,SAAS,IAKlB,IAAIgC,GAAY,EACD,IAAXP,GAAiBA,IACnBf,EAAQV,SAAS,qBACjBgC,GAAY,GAEVA,IAAc3B,IAASvB,EAASE,OAAUyC,EAAOK,MAAM,YAAgBL,GAAU,KAAOA,EAAS,OACnGf,EAAQV,SAAS,+CACjBgC,GAAY,GAEVA,IAAc3B,IAASvB,EAASI,MAAQuC,EAAOQ,OAAS,IAC1DvB,EAAQV,SAAS,uCACjBgC,GAAY,GAEVA,IACFtB,EAAQV,SAAS,IAKnB5B,EAAO8D,QAAQ7B,EAAMF,EAAMsB,GAC3B7C,OAwCE,yBCxGAuD,EAAYC,OAAOC,QAAQvD,GAAUwD,QAAO,yCAAgBxD,EAASC,QAAMwD,KAAI,mCAAEC,EAAF,iBAAWA,KAAGC,KAAK,KAClGC,EAAe,IAAIX,OAAJ,gBAAoBI,EAApB,gBAAqClC,EAArC,YAAgE,KAExE0C,EAAb,WAEI,WAAYvE,EAAQQ,GAAW,oBAC3BgE,KAAKxE,OAASA,EACdwE,KAAKhE,SAAWA,EAJxB,uCAOI,SAAIiE,GACA,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAMZ,OAAQa,IAAK,CACnC,IAAMC,EAAOF,EAAMC,GACfC,EAAKjB,MAAMY,IACXE,KAAKV,QAAQa,GAGrBH,KAAKhE,aAdb,sBAiBI,SAASiE,GACL,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAMZ,OAAQa,IAC9B,IAAKD,EAAMC,GAAGhB,MAAMY,GAChB,MAAM,iBAAN,OAAwBI,EAAE,EAA1B,OApBhB,qBAyBI,SAAQC,GACJ,IACIC,EAAUC,EAASxE,EADnBqE,EAAIF,KAAKM,WAAWH,EAAM,GADpB,EAGMH,KAAKO,UAAUJ,EAAMD,GAH3B,mBAGTA,EAHS,KAGNE,EAHM,KAIVF,EAAIF,KAAKM,WAAWH,EAAMD,GAJhB,MAKKF,KAAKO,UAAUJ,EAAMD,GAL1B,mBAKTA,EALS,KAKNG,EALM,KAMVH,EAAIF,KAAKM,WAAWH,EAAMD,GANhB,MAOGF,KAAKQ,UAAUL,EAAMD,GAPxB,mBAOTA,EAPS,KAONrE,EAPM,KASV,IAAM4E,EAAcjB,OAAOkB,KAAKxE,GAAU6C,MAAK,SAAA9C,GAAC,OAAIA,EAAE0E,gBAAkBP,EAASO,iBACjFX,KAAKxE,OAAO8D,QAAQpD,EAASuE,GAAcJ,EAASxE,KAnC5D,uBAsCI,SAAUsE,EAAMS,GAGZ,IAFA,IAAIV,EAAIU,EACJC,EAAQ,GACNX,EAAIC,EAAKd,SAAWc,EAAKD,GAAGhB,MAAM,OACpC2B,GAASV,EAAKD,GACdA,IAEJ,MAAO,CAACA,EAAGW,KA7CnB,uBAgDI,SAAUV,EAAMS,GAGZ,IAFA,IAAIV,EAAIU,EACJC,EAAQ,GACNX,EAAIC,EAAKd,QACXwB,GAASV,EAAKD,GACdA,IAEJ,MAAO,CAACA,EAAGW,KAvDnB,wBA0DI,SAAWV,EAAMS,GAEb,IADA,IAAIV,EAAIU,EACFV,EAAIC,EAAKd,QAAUc,EAAKD,GAAGhB,MAAM,OACnCgB,IAEJ,OAAOA,MA/Df,K,gBCNO,SAASY,IACZ,OACI,qCACI,oDACA,yCACY,uBACR,yDAEI,6BAGR,2CACc,uBACV,4CACY,uBADZ,mBAEoB,gCCXpC,IAAMC,EAAY,CACd,cAACD,EAAD,KAGG,SAASE,EAAT,GAAiD,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACpC,EAAwBxF,mBAAS,GAAjC,mBAAOyF,EAAP,KAAaC,EAAb,KAEA,OACI,eAACC,EAAA,EAAD,CAAOJ,KAAMA,EAAMK,OAAQJ,EAA3B,UACI,cAACG,EAAA,EAAME,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACH,EAAA,EAAMI,MAAP,iCAEJ,cAACJ,EAAA,EAAMK,KAAP,UACKX,EAAUI,EAAO,KAEtB,eAACE,EAAA,EAAMM,OAAP,CAAcC,UAAU,0BAAxB,UACI,cAACC,EAAD,CAAWC,OAAQX,EAAMhD,SAAU,SAAAlC,GAAC,OAAImF,EAAQnF,IAAI8F,OAAQhB,EAAU1B,SACtE,cAACX,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASsC,EAArC,yBAQhB,SAASW,EAAT,GAEI,IAF8C,IAA7BC,EAA4B,EAA5BA,OAAQ3D,EAAoB,EAApBA,SAAU4D,EAAU,EAAVA,OAC7BC,EAAQ,GAD+B,WAEpCC,GACLD,EAAME,KACF,cAACC,EAAA,EAAWC,KAAZ,CAA8BN,OAAQG,IAAWH,EAAQlD,QAAS,kBAAMT,EAAS8D,IAAjF,SACKA,GADiBA,KAFrBA,EAAS,EAAGA,GAAUF,EAAQE,IAAW,EAAzCA,GAOT,OACI,cAACE,EAAA,EAAD,UACKH,ICjCN,SAASK,IACZ,IAAMC,EAASvF,IACf,EAAwBrB,mBAAS,IAAjC,mBAAO6G,EAAP,KAAaC,EAAb,KACA,EAAwB9G,oBAAS,GAAjC,mBAAOuF,EAAP,KAAawB,EAAb,KAKA,EAA6B7E,qBAAWxC,GAAhCI,EAAR,EAAQA,OAAQQ,EAAhB,EAAgBA,SACV0G,EAAiBC,iBAAO,IAAI5C,EAAYvE,EAAQQ,IAiBtD,OACI,eAAC+B,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,cAACD,EAAA,EAAKE,MAAN,sDACA,cAACF,EAAA,EAAKG,QAAN,CAAcO,GAAG,WAAWmE,KAAM,EAAGrE,WAAY+D,EAAOtF,MAAOnB,MAAO0G,EAAMpE,SARnE,SAAAC,GACjBoE,EAAQpE,EAAEC,OAAOxC,UAQT,cAACkC,EAAA,EAAKG,QAAQM,SAAd,CAAuBf,KAAK,UAA5B,SAAuC6E,EAAOpF,aAElD,cAACwB,EAAA,EAAD,CAAQC,QAAQ,UAAUlB,KAAK,SAASmB,QAtBhC,WACZ,IAAMqB,EAAQsC,EAAKM,MAAM,MACnB3F,EAAUwF,EAAeI,QAAQC,SAAS9C,GAChDqC,EAAOlF,SAASF,GACZA,IAGJ1B,EAAOwH,QACPN,EAAeI,QAAQG,IAAIhD,KAcvB,iBANJ,IAM4E,IACxE,cAACvB,EAAA,EAAD,CAAQC,QAAQ,OAAOuE,KAAK,KAAKzF,KAAK,SAASmB,QA5BpC,kBAAM6D,GAAQ,IA4BzB,kBACA,cAACzB,EAAD,CAAiBC,KAAMA,EAAMC,YA9BjB,kBAAMuB,GAAQ,SCP/B,IAAMU,EAAb,4JACI,WACI,OACI,eAACC,EAAA,EAAD,CAAMC,iBAAiB,OAAvB,UACI,cAACC,EAAA,EAAD,CAAKC,SAAS,OAAOC,MAAM,OAA3B,SACI,cAACC,EAAA,EAAD,UACKzD,KAAK0D,iBAGd,cAACJ,EAAA,EAAD,CAAKC,SAAS,cAAcC,MAAO,gDAAkB,cAACG,EAAA,EAAD,CAAOhF,QAAQ,SAAf,oBAArD,SACI,cAAC8E,EAAA,EAAD,UACKzD,KAAK4D,6BAX9B,wBAkBI,WACI,OACI,eAACH,EAAA,EAAK/B,KAAN,WACI,cAAC+B,EAAA,EAAKhC,MAAN,iCAGA,cAAC,EAAD,SAxBhB,+BA6BI,WACI,OACI,eAACgC,EAAA,EAAK/B,KAAN,WACI,cAAC+B,EAAA,EAAKhC,MAAN,0BACA,cAACY,EAAD,WAjChB,GAA+BhH,IAAMwI,W,QCCxBC,EAAb,4MASIC,WAAa,YAAkB,IAAfjI,EAAc,EAAdA,QACZ,OACI,eAACkI,EAAA,EAAD,CAAOC,UAAQ,EAAf,UACI,gCACI,+BACI,mCACA,qCACA,uCACA,uCACA,2CAGR,gCACKnI,EAAQ6D,KAAI,SAACuE,EAAGhE,GAAJ,OACT,+BACI,6BAAKA,IACL,6BAAK,EAAKiE,UAAUD,EAAEE,SAAUF,EAAErI,SAClC,6BAAKqI,EAAErI,QACP,6BAAKqI,EAAElF,QACP,6BAAK,EAAKqF,WAAWH,EAAEE,cALlBlE,YAvBjC,EAoCIiE,UAAY,SAACC,EAAUvI,GAOnB,OANIuI,IAAalI,EAASI,OACtBT,EAAQA,EAAMyI,WAAW,IAEzBF,IAAalI,EAASG,OACtBR,EAAkB,SAAVA,EAAmB,EAAI,GAE5BW,EAAaX,IA3C5B,EA8CIwI,WAAa,SAAC5G,GACV,QAASA,GACL,KAAKvB,EAASE,IACV,MAAO,MACX,KAAKF,EAASG,KACV,MAAO,OACX,KAAKH,EAASI,KACV,MAAO,OACX,KAAKJ,EAASK,OACV,MAAO,SACX,KAAKL,EAASC,KACd,QACI,MAAO,KA1DvB,4CACI,WACI,OACI,cAACf,EAAWmJ,SAAZ,UACKvE,KAAK+D,iBAJtB,GAA+B1I,IAAMwI,W,gDCNxBW,EACT,WAAYJ,EAAUpF,EAAOnD,GAAQ,oBACjCmE,KAAKoE,SAAWA,EAChBpE,KAAKhB,MAAQA,EACbgB,KAAKnE,MAAQA,G,iCCDR4I,EAAb,WAGI,aAAuB,IAAXvB,EAAU,uDAAH,EAAG,6EAClBlD,KAAKkD,KAAOA,EACZlD,KAAK0E,aALb,8CAQI,WAEI,IADA,IAAM5I,EAAU,GACPoE,EAAI,EAAGA,EAAIF,KAAKkD,KAAMhD,IAC3BpE,EAAQoG,KAAK,IAAIsC,EAAOtI,EAASC,KAAM,KAAM,IAEjD,YAAA6D,KAAA,MAAgBlE,IAbxB,mBAgBI,WACI,OAAO,wBAAIkE,KAAX,SAjBR,mBAoBI,WACIA,KAAK0E,eArBb,kBAwBI,SAAKC,GAKD,IAJA,IAAI/D,EAAQ,EACRgE,GAAQ,EACN9I,EAAO,YAAGkE,KAAH,OAEL4E,GAAShE,EAAQ9E,EAAQuD,QAAQ,CACrC,GAAIvD,EAAQ8E,GAAOwD,WAAalI,EAASC,KAAM,CAC3CyI,GAAQ,EACR,MAEJhE,IAECgE,EAGD9I,EAAQ8E,GAAS+D,EAFjB7I,EAAQoG,KAAKyC,OArCzB,K,wBCHaE,EAAb,WAII,aAAwB,IAAZ3B,EAAW,uDAAJ,GAAI,6EACnBlD,KAAKkD,KAAOA,EACZlD,KAAK0E,aANb,8CASI,WACI,YAAA1E,KAAA,MAAe8E,MAAM9E,KAAKkD,MAAM6B,KAAK,KAV7C,mBAaI,WACI/E,KAAK0E,eAdb,gBAiBI,WACI,OAAO,wBAAI1E,KAAX,SAlBR,kBAqBI,SAAKY,GACD,IAAMoE,EAAG,YAAGhF,KAAH,MACT,GAAIY,GAASoE,EAAI3F,OACb,MAAO,GAEX,GAAmB,IAAf2F,EAAIpE,GACJ,MAAO,IAIX,IAFA,IAAMqE,EAAS,GACX/E,EAAI,EACDA,EAAIU,EAAQoE,EAAI3F,QAA6B,IAAnB2F,EAAI9E,EAAIU,IACrCqE,EAAO/E,GAAK8E,EAAI9E,EAAIU,GACpBV,IAEJ,OAAO+E,EAAOpF,KAAK,MAnC3B,mBAsCI,SAAMhE,GACF,GAAqB,kBAAVA,EAAX,CAIA,IAAMwD,EAASxD,EAAMwD,OACrB,IAAKA,EACD,OAAQ,EAEZ,IAAM2F,EAAG,YAAGhF,KAAH,MACHY,EAAQZ,KAAKkF,cAAc7F,GACjC,IAAe,IAAXuB,EACA,OAAQ,EAEZ,IAAK,IAAIV,EAAI,EAAGA,EAAIb,EAAQa,IACxB8E,EAAI9E,EAAIU,GAAS/E,EAAMqE,GAE3B,OAAOU,EAfHuE,MAAM,yCAxClB,2BA0DI,SAAc9F,GAGV,IAFA,IAAIa,EAAI,EACF8E,EAAG,YAAGhF,KAAH,MACFE,EAAIF,KAAKkD,MAAM,CAClB,IAAIJ,EAAU5C,EACd,GAAe,IAAX8E,EAAI9E,GAAU,CACd,KAAO4C,EAAU9C,KAAKkD,MAAQJ,EAAU5C,EAAIb,GAA2B,IAAjB2F,EAAIlC,IACtDA,IAEJ,GAAIA,IAAY9C,KAAKkD,KACjB,OAAQ,EAEZ,GAAIJ,EAAU5C,EAAIb,GAA2B,IAAjB2F,EAAIlC,GAAgB,CAC5C5C,EAAI4C,EAAU,EACd,SAEJ,OAAO5C,EAAI,EAAIA,EAAI,EAAIA,EAE3BA,SA5EZ,K,6CCKakF,GAAb,WAKI,aAAe,sIACX,YAAApF,KAAA,MAAc,IAAIyE,EAClB,YAAAzE,KAAA,MAAa,IAAI6E,EAPzB,yCAUI,WACI,YAAA7E,KAAA,MAAYgD,QACZ,YAAAhD,KAAA,MAAWgD,UAZnB,qBAeI,SAAQoB,EAAUpF,EAAOnD,GAIrB,IAHKuI,IAAalI,EAASI,OACvBT,EAAQA,EAAM,KAEbuI,IAAalI,EAASK,SAER,KADfV,EAAQ,YAAAmE,KAAA,MAAWqF,MAAMxJ,IAD7B,CAQA,IAAM8I,EAAS,IAAIH,GAAQJ,EAAUpF,EAAOnD,GAE5C,YAAAmE,KAAA,MAAYkC,KAAKyC,GACjBW,QAAQC,IAAI,iBAAkBZ,GAC9BW,QAAQC,IAAIvF,KAAKlE,cATTqJ,MAAM,2BAtBtB,mBAkCI,WACI,OAAO,YAAAnF,KAAA,MAAYlE,UAnC3B,oBAsCI,WACI,OAAO,YAAAkE,KAAA,MAAWwF,SAvC1B,K,SCLe,OAA0B,wC,kBCM5BC,GAAb,4MASI1B,WAAa,YAAmB,IAAhBhI,EAAe,EAAfA,SACN2J,EAAYC,KAAKC,MAAM7J,EAASsD,OAZ5B,GAaJuD,EAAO,EAAKiD,YAAY9J,EAAU2J,EAb9B,GAcJI,EAAShB,MAAMiB,KAAKjB,MAdhB,GAciCpE,QAAQf,KAAI,SAAA1D,GAAC,OAAIA,EAAEY,SAAS,GAAGC,SAAS,EAAG,QACtF,OACI,eAACkH,EAAA,EAAD,CAAOC,UAAQ,EAAf,UACI,gCACI,+BACI,qCACC6B,EAAOnG,KAAI,SAAA1D,GAAC,OAAK,6BAAaA,GAAJA,WAGnC,gCACK2G,EAAKjD,KAAI,SAACuE,EAAGhE,GAAJ,OACN,6BACKgE,EAAEvE,KAAI,SAACqG,EAAG9F,GAAJ,OAAU,EAAK+F,WAAWD,EAAG9F,OAD/BA,YAvBjC,4CACI,WACI,OACI,cAAC9E,EAAWmJ,SAAZ,UACKvE,KAAK+D,eAJtB,wBAgCI,SAAWlI,EAAO+E,GACd,GAAc,IAAVA,EACA,OACI,oBAAgBgB,UAAU,OAA1B,SAAkC5B,KAAKkG,gBAAgBrK,EAAO+E,IAArDA,GAGjB,IAAMuF,EAAgC,kBAAVtK,EAAP,WAAgCA,EAAhC,KAA2CA,EAEhE,OACI,cAACuK,GAAA,EAAD,CAAgBC,QAAS,cAACC,GAAA,EAAD,UAAUH,IAAnC,SACI,6BAAkBnG,KAAKkG,gBAAgBrK,EAAO+E,IAArCA,OA1CzB,6BA+CI,SAAgB/E,EAAO+E,GACnB,OAAc,IAAVA,EACO/E,EAAMgB,SAAS,GAAGC,SAAS,EAAG,MAEpB,kBAAVjB,IACPA,EAAQA,EAAMyI,WAAW,IAEtBzI,EAAMgB,SAAS,GAAGC,SAAS,EAAG,QAtD7C,yBAyDI,SAAY0I,EAAME,EAAWa,GAEzB,IADA,IAAM3D,EAAO,GACJ4D,EAAM,EAAGA,EAAMd,EAAWc,IAAO,CACtC,IAAMC,EAAO,GACbA,EAAKvE,KAAKsE,GACV,IAAK,IAAIE,EAAM,EAAGA,EAAMH,EAAWG,IAAO,CACtC,IAAMC,EAAOnB,EAAKgB,EAAMD,EAAYG,GACpCD,EAAKvE,KAAKyE,GAEd/D,EAAKV,KAAKuE,GAEd,OAAO7D,MApEf,GAA8BvH,IAAMwI,WCI9BrI,GAAS,IAAI4J,GAiDJwB,OA/Cf,WACE,OACE,cAACrL,EAAD,CAAaC,OAAQA,GAArB,SACE,eAACqL,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAQC,GAAG,OAAOpI,QAAQ,OAA1B,UACE,eAACmI,EAAA,EAAOE,MAAR,WAAc,qBACZC,IAAI,GACJC,IAAKC,GACLC,MAAM,KACNC,OAAO,KACPzF,UAAU,6BACT,IANH,aAOA,eAACkF,EAAA,EAAOQ,KAAR,eACIC,GAAYC,cAGlB,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAA9B,SACE,cAAC,EAAD,MAEF,cAACJ,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAA/B,SACE,cAACrE,EAAA,EAAD,UACE,eAACA,EAAA,EAAK/B,KAAN,WACE,cAAC+B,EAAA,EAAKhC,MAAN,oBAGA,cAAC,EAAD,cAKR,cAACgG,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACjE,EAAA,EAAD,UACE,eAACA,EAAA,EAAK/B,KAAN,WACE,cAAC+B,EAAA,EAAKhC,MAAN,mBACA,cAACgC,EAAA,EAAK6D,KAAN,iDACA,cAAC,GAAD,mBCrCDS,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.c0ec9245.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport const MemContext = React.createContext();\r\n\r\nexport function MemProvider({ memsym, children }) {\r\n    const [, setX] = useState(0);\r\n\r\n    const onUpdate = () => {\r\n        setX(x => x > 0 ? 0 : 1);\r\n    }\r\n\r\n    return (\r\n        <MemContext.Provider value={{ memsym, records: memsym.records, heapData: memsym.heapData, onUpdate }}>\r\n            {children}\r\n        </MemContext.Provider>\r\n    );\r\n}","export const DataType = {\r\n    NULL: 0,\r\n    INT: 1,\r\n    BOOL: 2,\r\n    CHAR: 3,\r\n    STRING: 4,    \r\n}","import { useState } from 'react';\r\n\r\nexport function toByteString(value) {\r\n    const buffer = new ArrayBuffer(1);\r\n    const arr = new Uint8Array(buffer);\r\n    arr[0] = +value;\r\n    const normValue = arr[0];\r\n    return normValue.toString(2).padStart(8, '0');\r\n}\r\n\r\nexport function useFeedback() {\r\n    const [valid, setValid] = useState(true);\r\n    const [message, setMessage] = useState('');\r\n    const setError = message => {\r\n      setValid(!message);\r\n      setMessage(message);\r\n    };\r\n  \r\n    return {\r\n      valid,\r\n      message,\r\n      setError\r\n    }\r\n  }","export const nameRegexString = \"[_a-zA-Z][_a-zA-Z0-9]*\";","import { useState, useContext } from \"react\"\r\nimport { Form, Button, FormGroup } from \"react-bootstrap\";\r\nimport { DataType } from \"../memsym/data-type\";\r\nimport { MemContext } from \"./memcontext\";\r\nimport { useFeedback } from '../memsym/utils';\r\nimport {nameRegexString} from '../memsym/constants';\r\n\r\n\r\nfunction checkIfNameExists(memsym, name) {\r\n  return !!memsym.records.find(x => x.label === name);\r\n}\r\n\r\nexport const RecordForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [type, setType] = useState(DataType.INT);\r\n  const [value, setValue] = useState(0);\r\n\r\n  const { memsym, onUpdate } = useContext(MemContext);\r\n\r\n  const nameFb = useFeedback();\r\n  const valueFb = useFeedback();\r\n\r\n  const onClick = () => {\r\n    let actual = value;\r\n    if (+type === DataType.BOOL && !(value === \"true\" || value === \"false\")) {\r\n      actual = \"true\";\r\n    }\r\n\r\n    let nameIsOk = true;\r\n    if (!name) {\r\n      nameFb.setError('Label is required');\r\n      nameIsOk = false;\r\n    }\r\n    if (nameIsOk && checkIfNameExists(memsym, name)) {\r\n      nameFb.setError('Label is already defined');\r\n      nameIsOk = false;\r\n    }\r\n    if (nameIsOk && !name.match(new RegExp(`^${nameRegexString}$`))) {\r\n      nameFb.setError(\"Label must start with '_' or letter (a-z, A-Z) and be following by '_' or letters (a-z, A-Z) or numbers (0-9)\");\r\n      nameIsOk = false;\r\n    }\r\n    if (nameIsOk) {\r\n      nameFb.setError('');\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    let valueIsOk = true;\r\n    if (actual !== 0 && !actual) {\r\n      valueFb.setError('Value is required');\r\n      valueIsOk = false;\r\n    }\r\n    if (valueIsOk && +type === DataType.INT && ((!actual.match(/^-?\\d+$/)) || (actual < -128 || actual > 127))) {\r\n      valueFb.setError('Value must be a number in range [-128; 127]');\r\n      valueIsOk = false;\r\n    }\r\n    if (valueIsOk && +type === DataType.CHAR && actual.length > 1) {\r\n      valueFb.setError('Value must be only 1 character long');\r\n      valueIsOk = false;\r\n    }\r\n    if (valueIsOk) {\r\n      valueFb.setError('');\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    memsym.declare(type, name, actual);\r\n    onUpdate();\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <FormGroup>\r\n        <Form.Label>Label</Form.Label>\r\n        <Form.Control value={name} onChange={e => setName(e.target.value)} name=\"name\" type=\"text\" placeholder=\"Label\" isInvalid={!nameFb.valid} />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {nameFb.message}\r\n        </Form.Control.Feedback>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Form.Label>Type</Form.Label>\r\n        <Form.Control as=\"select\" name=\"type\" value={type} onChange={(e => setType(e.target.value))}>\r\n          <option value={DataType.INT}>int</option>\r\n          <option value={DataType.CHAR}>char</option>\r\n          <option value={DataType.BOOL}>bool</option>\r\n          <option value={DataType.STRING}>string</option>\r\n        </Form.Control>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Form.Label>Value</Form.Label>\r\n        {+type === DataType.BOOL && (\r\n          <Form.Control as=\"select\" name=\"value\" value={value} onChange={(e => setValue(e.target.value))}>\r\n            <option value=\"true\">true</option>\r\n            <option value=\"false\">false</option>\r\n          </Form.Control>)\r\n        }\r\n        {+type !== DataType.BOOL && (\r\n          <>\r\n            <Form.Control value={value} onChange={e => setValue(e.target.value)} name=\"value\" type=\"text\" placeholder=\"Value\" isInvalid={!valueFb.valid} />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {valueFb.message}\r\n            </Form.Control.Feedback>\r\n          </>\r\n        )}\r\n      </FormGroup>\r\n\r\n\r\n      <Button variant=\"primary\" type=\"button\" onClick={onClick}>\r\n        Declare\r\n      </Button>\r\n    </Form>\r\n  )\r\n}","import { DataType } from \"./data-type\";\r\nimport { nameRegexString } from './constants';\r\n\r\nconst dataTypes = Object.entries(DataType).filter(([,v]) => v !== DataType.NULL).map(([k,v]) => k).join('|');\r\nconst declareRegex = new RegExp(`^\\\\s*(${dataTypes})\\\\s+${nameRegexString}\\\\s(.*)$`, \"i\");\r\n\r\nexport class Interpreter {    \r\n\r\n    constructor(memsym, onUpdate) {\r\n        this.memsym = memsym;\r\n        this.onUpdate = onUpdate;\r\n    }\r\n\r\n    run(lines) {\r\n        for (let i = 0; i < lines.length; i++) { \r\n            const line = lines[i];\r\n            if (line.match(declareRegex)){\r\n                this.declare(line);\r\n            }\r\n        }\r\n        this.onUpdate();\r\n    }\r\n\r\n    validate(lines) {\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (!lines[i].match(declareRegex)) {\r\n                return `Error at line ${i+1}!`;\r\n            }\r\n        }\r\n    }\r\n\r\n    declare(line) {\r\n        let i = this.skipSpaces(line, 0);\r\n        let typeName, varName, value;\r\n        [i, typeName] = this.readToken(line, i);\r\n        i = this.skipSpaces(line, i);\r\n        [i, varName] = this.readToken(line, i);\r\n        i = this.skipSpaces(line, i);\r\n        [i, value] = this.readValue(line, i);\r\n        \r\n        const dataTypeKey = Object.keys(DataType).find(x => x.toLowerCase() === typeName.toLowerCase());\r\n        this.memsym.declare(DataType[dataTypeKey], varName, value);\r\n    }\r\n\r\n    readToken(line, index) {\r\n        let i = index;\r\n        let token = '';\r\n        while(i < line.length && !line[i].match(/\\s/)) {\r\n            token += line[i];\r\n            i++;\r\n        }\r\n        return [i, token];\r\n    }\r\n\r\n    readValue(line, index) {\r\n        let i = index;\r\n        let token = '';\r\n        while(i < line.length) {\r\n            token += line[i];\r\n            i++;\r\n        }\r\n        return [i, token];\r\n    }\r\n\r\n    skipSpaces(line, index) {\r\n        let i = index;\r\n        while(i < line.length && line[i].match(/\\s/)) {\r\n            i++;\r\n        }\r\n        return i;\r\n    }\r\n}","export function Declare() {\r\n    return (\r\n        <>\r\n            <h5>Declare a variable</h5>\r\n            <p>\r\n                format: <br />\r\n                <code>\r\n                    &lt;TYPE&gt; &lt;NAME&gt; &lt;VALUE&gt;\r\n                    <br />\r\n                </code>\r\n            </p>\r\n            <p>\r\n                examples: <br />\r\n                <code>\r\n                    int a 34<br />\r\n                    string b abcdef1<br />\r\n                </code>\r\n            </p>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Modal, Button, Pagination } from 'react-bootstrap';\r\nimport { Declare } from './declare';\r\n\r\nconst helpPages = [\r\n    <Declare />\r\n]\r\n\r\nexport function InterpreterHelp({ show, handleClose }) {\r\n    const [page, setPage] = useState(1);\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Interpreter Help</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {helpPages[page - 1]}\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"justify-content-between\">\r\n                <Paginator active={page} onChange={x => setPage(x)} amount={helpPages.length} />\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nfunction Paginator({ active, onChange, amount }) {\r\n    const items = [];\r\n    for (let number = 1; number <= amount; number++) {\r\n        items.push(\r\n            <Pagination.Item key={number} active={number === active} onClick={() => onChange(number)}>\r\n                {number}\r\n            </Pagination.Item>,\r\n        );\r\n    }\r\n    return (\r\n        <Pagination>\r\n            {items}\r\n        </Pagination>\r\n    )\r\n}","import React, { useContext, useState, useRef } from \"react\";\r\nimport { FormGroup, Button, Form } from 'react-bootstrap';\r\nimport { Interpreter } from \"../memsym/interpreter\";\r\nimport { useFeedback } from \"../memsym/utils\";\r\nimport { InterpreterHelp } from './help/interpreterHelp';\r\nimport { MemContext } from \"./memcontext\";\r\n\r\nexport function InterpreterView() {\r\n    const textFb = useFeedback();   \r\n    const [text, setText] = useState('');\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const { memsym, onUpdate } = useContext(MemContext);\r\n    const interpreterRef = useRef(new Interpreter(memsym, onUpdate))\r\n\r\n    const onClick = () => {\r\n        const lines = text.split('\\n');\r\n        const message = interpreterRef.current.validate(lines);\r\n        textFb.setError(message);\r\n        if (message) {\r\n            return;\r\n        }\r\n        memsym.clear();\r\n        interpreterRef.current.run(lines);\r\n    }\r\n\r\n    const onTextChange = e => {\r\n        setText(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <Form>\r\n            <FormGroup>\r\n                <Form.Label>Input a script and click the Run button</Form.Label>\r\n                <Form.Control as=\"textarea\" rows={5} isInvalid={!textFb.valid} value={text} onChange={onTextChange} />\r\n                <Form.Control.Feedback type=\"invalid\">{textFb.message}</Form.Control.Feedback>\r\n            </FormGroup>\r\n            <Button variant=\"primary\" type=\"button\" onClick={onClick}>Run</Button> {' '}           \r\n            <Button variant=\"link\" size=\"sm\" type=\"button\" onClick={handleShow}>Help</Button>\r\n            <InterpreterHelp show={show} handleClose={handleClose} />\r\n        </Form>\r\n    );\r\n}","import React from \"react\";\r\nimport { Card, Tabs, Tab, Badge } from 'react-bootstrap';\r\nimport { RecordForm } from './form';\r\nimport { InterpreterView } from './interpreterView';\r\n\r\nexport class InputCard extends React.Component {\r\n    render() {\r\n        return (\r\n            <Tabs defaultActiveKey=\"form\">\r\n                <Tab eventKey=\"form\" title=\"Form\">\r\n                    <Card>\r\n                        {this.renderForm()}\r\n                    </Card>\r\n                </Tab>\r\n                <Tab eventKey=\"interpreter\" title={<span>Interpreter <Badge variant=\"danger\">WIP</Badge></span>}>\r\n                    <Card>\r\n                        {this.renderInterpreter()}\r\n                    </Card>\r\n                </Tab>\r\n            </Tabs>\r\n        )\r\n    }\r\n\r\n    renderForm() {\r\n        return (\r\n            <Card.Body>\r\n                <Card.Title>\r\n                    Declare a variable\r\n                </Card.Title>\r\n                <RecordForm />\r\n            </Card.Body>\r\n        )\r\n    }\r\n\r\n    renderInterpreter() {\r\n        return (\r\n            <Card.Body>\r\n                <Card.Title>Interpreter</Card.Title>\r\n                <InterpreterView />\r\n            </Card.Body>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { DataType } from \"../memsym/data-type\";\r\nimport { MemContext } from \"./memcontext\";\r\nimport { toByteString } from '../memsym/utils';\r\n\r\nexport class StackView extends React.Component {\r\n    render() {\r\n        return (\r\n            <MemContext.Consumer>\r\n                {this.renderBody}\r\n            </MemContext.Consumer>\r\n        );\r\n    }\r\n\r\n    renderBody = ({ records }) => {\r\n        return (\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>bin</th>\r\n                        <th>value</th>\r\n                        <th>label</th>\r\n                        <th>type</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {records.map((r, i) => (\r\n                        <tr key={i}>\r\n                            <td>{i}</td>\r\n                            <td>{this.renderBin(r.dataType, r.value)}</td>\r\n                            <td>{r.value}</td>\r\n                            <td>{r.label}</td>\r\n                            <td>{this.renderType(r.dataType)}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    renderBin = (dataType, value) => {\r\n        if (dataType === DataType.CHAR) {\r\n            value = value.charCodeAt(0);\r\n        }\r\n        if (dataType === DataType.BOOL) {\r\n            value = value === \"true\" ? 1 : 0;\r\n        }\r\n        return toByteString(value);\r\n    }\r\n\r\n    renderType = (type) => {\r\n        switch (+type) {\r\n            case DataType.INT:\r\n                return 'int';\r\n            case DataType.BOOL:\r\n                return 'bool';\r\n            case DataType.CHAR:\r\n                return 'char';\r\n            case DataType.STRING:\r\n                return 'string';\r\n            case DataType.NULL:\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n\r\n}","export class Record {\r\n    constructor(dataType, label, value) {\r\n        this.dataType = dataType;\r\n        this.label = label;\r\n        this.value = value;\r\n    }\r\n}","import { DataType } from \"./data-type\";\r\nimport { Record } from \"./record\";\r\n\r\nexport class Stack {\r\n    #records;\r\n\r\n    constructor(size = 8) {\r\n        this.size = size;\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        const records = [];\r\n        for (let i = 0; i < this.size; i++) {\r\n            records.push(new Record(DataType.NULL, null, 0));\r\n        }\r\n        this.#records = records;\r\n    }\r\n\r\n    get records() { \r\n        return [...this.#records]\r\n    }\r\n\r\n    clear() {\r\n        this.initialize();\r\n    }\r\n\r\n    push(record) {\r\n        let index = 0;\r\n        let found = false;\r\n        const records = this.#records;\r\n\r\n        while (!found && index < records.length) {\r\n            if (records[index].dataType === DataType.NULL) {\r\n                found = true;\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n        if (!found) {\r\n            records.push(record);\r\n        } else {\r\n            records[index] = record;\r\n        }\r\n    }\r\n}","export class Heap {\r\n    // printable chars /[\\x00-\\x08\\x0E-\\x1F]/.test(data)\r\n    #memory;\r\n\r\n    constructor(size = 64) {\r\n        this.size = size;\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        this.#memory = Array(this.size).fill(0);\r\n    }\r\n\r\n    clear() {\r\n        this.initialize();\r\n    }\r\n\r\n    get data() {\r\n        return [...this.#memory];\r\n    }\r\n\r\n    read(index) {\r\n        const mem = this.#memory;\r\n        if (index >= mem.length) {\r\n            return '';\r\n        }\r\n        if (mem[index] === 0) {\r\n            return '.';\r\n        }\r\n        const result = [];        \r\n        let i = 0;\r\n        while (i + index < mem.length && mem[i + index] !== 0) {\r\n            result[i] = mem[i + index];\r\n            i++;\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    alloc(value) {\r\n        if (typeof value !== \"string\") {\r\n            alert('Unable to allocate non-string value');\r\n            return;\r\n        }\r\n        const length = value.length;\r\n        if (!length) {\r\n            return -1;\r\n        }\r\n        const mem = this.#memory;\r\n        const index = this.findFreeIndex(length);\r\n        if (index === -1) {\r\n            return -1;\r\n        }\r\n        for (let i = 0; i < length; i++) {\r\n            mem[i + index] = value[i];\r\n        }\r\n        return index;\r\n    }\r\n\r\n    findFreeIndex(length) {\r\n        let i = 0;\r\n        const mem = this.#memory;\r\n        while (i < this.size) {\r\n            let current = i;\r\n            if (mem[i] === 0) {\r\n                while (current < this.size && current - i < length && mem[current] === 0) {\r\n                    current++;\r\n                }\r\n                if (current === this.size) {\r\n                    return -1;\r\n                }\r\n                if (current - i < length || mem[current] !== 0) {\r\n                    i = current + 1;\r\n                    continue;\r\n                }                \r\n                return i > 0 ? i + 1 : i;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n}","import { DataType } from \"./data-type\";\r\nimport { Record } from \"./record\";\r\nimport { Stack } from \"./stack\";\r\nimport { Heap } from \"./heap\";\r\n\r\nexport class MemSym {\r\n    #stack;\r\n\r\n    #heap;\r\n\r\n    constructor() {\r\n        this.#stack = new Stack();\r\n        this.#heap = new Heap();\r\n    }\r\n\r\n    clear() {\r\n        this.#stack.clear();\r\n        this.#heap.clear();\r\n    }\r\n\r\n    declare(dataType, label, value) {\r\n        if (+dataType === DataType.CHAR) {\r\n            value = value[0];\r\n        }\r\n        if (+dataType === DataType.STRING) {\r\n            value = this.#heap.alloc(value);\r\n            if (value === -1) {\r\n                alert('failed to alloc value');\r\n                return;\r\n            }\r\n        }\r\n\r\n        const record = new Record(+dataType, label, value);\r\n\r\n        this.#stack.push(record);\r\n        console.log('var declared: ', record);\r\n        console.log(this.records);\r\n    }\r\n\r\n    get records() {\r\n        return this.#stack.records;\r\n    }\r\n\r\n    get heapData() {\r\n        return this.#heap.data;\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/logo_memsym.482cc514.svg\";","import React from \"react\";\r\nimport { Table, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { MemContext } from './memcontext';\r\n\r\nconst colsCount = 8;\r\n\r\nexport class HeapView extends React.Component {\r\n    render() {\r\n        return (\r\n            <MemContext.Consumer>\r\n                {this.renderBody}\r\n            </MemContext.Consumer>\r\n        )\r\n    }\r\n\r\n    renderBody = ({ heapData }) => {\r\n        const rowsCount = Math.floor(heapData.length / colsCount);\r\n        const rows = this.to2DimArray(heapData, rowsCount, colsCount);\r\n        const header = Array.from(Array(colsCount).keys()).map(x => x.toString(2).padStart(3, '0'));\r\n        return (\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#/#</th>\r\n                        {header.map(x => (<th key={x}>{x}</th>))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows.map((r, i) => (\r\n                        <tr key={i}>\r\n                            {r.map((c, i) => this.renderCell(c, i))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    renderCell(value, index) {\r\n        if (index === 0) {\r\n            return (\r\n                <td key={index} className=\"bold\">{this.renderCellValue(value, index)}</td>\r\n            )\r\n        }\r\n        const tooltipValue = typeof value === 'string' ? `'${value}'` : value;\r\n\r\n        return (\r\n            <OverlayTrigger overlay={<Tooltip>{tooltipValue}</Tooltip>}>\r\n                <td key={index} >{this.renderCellValue(value, index)}</td>\r\n            </OverlayTrigger>\r\n        )\r\n    }\r\n\r\n    renderCellValue(value, index) {\r\n        if (index === 0) {\r\n            return value.toString(2).padStart(3, '0');\r\n        }\r\n        if (typeof value === 'string') {\r\n            value = value.charCodeAt(0);\r\n        }\r\n        return value.toString(2).padStart(8, '0');\r\n    }\r\n\r\n    to2DimArray(data, rowsCount, colsCount) {\r\n        const rows = [];\r\n        for (let row = 0; row < rowsCount; row++) {\r\n            const cols = [];\r\n            cols.push(row);\r\n            for (let col = 0; col < colsCount; col++) {\r\n                const item = data[row * colsCount + col];\r\n                cols.push(item);\r\n            }\r\n            rows.push(cols);\r\n        }\r\n        return rows;\r\n    }\r\n}","import './App.css';\r\nimport { MemProvider } from './components/memcontext';\r\nimport { InputCard } from './components/inputCard';\r\nimport { StackView } from './components/stackView';\r\nimport { Container, Row, Col, Card, Navbar } from 'react-bootstrap';\r\nimport { MemSym } from './memsym/memsym';\r\nimport packageJson from '../package.json';\r\nimport Logo from './logo_memsym.svg';\r\nimport { HeapView } from './components/heapView';\r\n\r\nconst memsym = new MemSym();\r\n\r\nfunction App() {\r\n  return (\r\n    <MemProvider memsym={memsym}>\r\n      <Container>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand><img\r\n            alt=\"\"\r\n            src={Logo}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n          />{' '} MemSym</Navbar.Brand>\r\n          <Navbar.Text>\r\n            v{packageJson.version}\r\n          </Navbar.Text>\r\n        </Navbar>\r\n        <Row>\r\n          <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\">\r\n            <InputCard />\r\n          </Col>\r\n          <Col xs=\"12\" sm=\"12\" md=\"8\" lg=\"5\">\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title>\r\n                  Stack\r\n                </Card.Title>\r\n                <StackView />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title>Heap</Card.Title>\r\n                <Card.Text>hover over a cell to see the value</Card.Text>\r\n                <HeapView />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </MemProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}