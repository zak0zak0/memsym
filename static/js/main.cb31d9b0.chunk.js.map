{"version":3,"sources":["components/memcontext.js","memsym/data-type.js","components/form.js","memsym/utils.js","components/stackView.js","memsym/record.js","memsym/stack.js","memsym/heap.js","memsym/memsym.js","logo_memsym.svg","components/heapView.js","App.js","reportWebVitals.js","index.js"],"names":["MemContext","React","createContext","MemProvider","memsym","children","useState","setX","Provider","value","records","heapData","onUpdate","x","DataType","useFeedback","valid","setValid","message","setMessage","setError","RecordForm","name","setName","type","setType","setValue","useContext","nameFb","valueFb","Form","FormGroup","Label","Control","onChange","e","target","placeholder","isInvalid","Feedback","as","Button","variant","onClick","actual","nameIsOk","find","label","checkIfNameExists","match","valueIsOk","length","declare","toByteString","buffer","ArrayBuffer","arr","Uint8Array","toString","padStart","StackView","renderBody","Table","bordered","map","r","i","renderBin","dataType","renderType","charCodeAt","Consumer","this","Component","Record","Stack","size","push","record","index","found","Heap","Array","fill","mem","result","join","findFreeIndex","alert","current","MemSym","alloc","console","log","data","HeapView","rowsCount","Math","floor","rows","to2DimArray","header","from","keys","c","renderCell","className","renderCellValue","tooltipValue","OverlayTrigger","overlay","Tooltip","colsCount","row","cols","col","item","App","Container","Navbar","bg","Brand","alt","src","Logo","width","height","Text","packageJson","version","Row","Col","xs","sm","md","lg","Card","Body","Title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb31d9b0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport const MemContext = React.createContext();\r\n\r\nexport function MemProvider({ memsym, children }) {\r\n    const [, setX] = useState(0);\r\n\r\n    const onUpdate = () => {\r\n        setX(x => x > 0 ? 0 : 1);\r\n    }\r\n\r\n    return (\r\n        <MemContext.Provider value={{ memsym, records: memsym.records, heapData: memsym.heapData, onUpdate }}>\r\n            {children}\r\n        </MemContext.Provider>\r\n    );\r\n}","export const DataType = {\r\n    NULL: 0,\r\n    INT: 1,\r\n    BOOL: 2,\r\n    CHAR: 3,\r\n    STRING: 4,    \r\n}","import { useState, useContext } from \"react\"\r\nimport { Form, Button, FormGroup } from \"react-bootstrap\";\r\nimport { DataType } from \"../memsym/data-type\";\r\nimport { MemContext } from \"./memcontext\";\r\n\r\nfunction useFeedback() {\r\n  const [valid, setValid] = useState(true);\r\n  const [message, setMessage] = useState('');\r\n  const setError = message => {\r\n    setValid(!message);\r\n    setMessage(message);\r\n  };\r\n\r\n  return {\r\n    valid,\r\n    message,\r\n    setError\r\n  }\r\n}\r\n\r\nfunction checkIfNameExists(memsym, name) {\r\n  return !!memsym.records.find(x => x.label === name);\r\n}\r\n\r\nexport const RecordForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [type, setType] = useState(DataType.INT);\r\n  const [value, setValue] = useState(0);\r\n\r\n  const { memsym, onUpdate } = useContext(MemContext);\r\n\r\n  const nameFb = useFeedback();\r\n  const valueFb = useFeedback();\r\n\r\n  const onClick = () => {\r\n    let actual = value;\r\n    if (+type === DataType.BOOL && !(value === \"true\" || value === \"false\")) {\r\n      actual = \"true\";\r\n    }\r\n\r\n    let nameIsOk = true;\r\n    if (!name) {\r\n      nameFb.setError('Label is required');\r\n      nameIsOk = false;\r\n    }\r\n    if (nameIsOk && checkIfNameExists(memsym, name)) {\r\n      nameFb.setError('Label is already defined');\r\n      nameIsOk = false;\r\n    }\r\n    if (nameIsOk && !name.match(/^[_a-zA-Z][_a-zA-Z0-9]*$/)) {\r\n      nameFb.setError(\"Label must start with '_' or letter (a-z, A-Z) and be following by '_' or letters (a-z, A-Z) or numbers (0-9)\");\r\n      nameIsOk = false;\r\n    }\r\n    if (nameIsOk) {\r\n      nameFb.setError('');\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    let valueIsOk = true;\r\n    if (actual !== 0 && !actual) {\r\n      valueFb.setError('Value is required');\r\n      valueIsOk = false;\r\n    }\r\n    if (valueIsOk && +type === DataType.INT && ((!actual.match(/^-?\\d+$/)) || (actual < -128 || actual > 127))) {\r\n      valueFb.setError('Value must be a number in range [-128; 127]');\r\n      valueIsOk = false;\r\n    }\r\n    if (valueIsOk && +type === DataType.CHAR && actual.length > 1) {\r\n      valueFb.setError('Value must be only 1 character long');\r\n      valueIsOk = false;\r\n    }\r\n    if (valueIsOk) {\r\n      valueFb.setError('');\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    memsym.declare(type, name, actual);\r\n    onUpdate();\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <FormGroup>\r\n        <Form.Label>Label</Form.Label>\r\n        <Form.Control value={name} onChange={e => setName(e.target.value)} name=\"name\" type=\"text\" placeholder=\"Label\" isInvalid={!nameFb.valid} />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {nameFb.message}\r\n        </Form.Control.Feedback>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Form.Label>Type</Form.Label>\r\n        <Form.Control as=\"select\" name=\"type\" value={type} onChange={(e => setType(e.target.value))}>\r\n          <option value={DataType.INT}>int</option>\r\n          <option value={DataType.CHAR}>char</option>\r\n          <option value={DataType.BOOL}>bool</option>\r\n          <option value={DataType.STRING}>string</option>\r\n        </Form.Control>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Form.Label>Value</Form.Label>\r\n        {+type === DataType.BOOL && (\r\n          <Form.Control as=\"select\" name=\"value\" value={value} onChange={(e => setValue(e.target.value))}>\r\n            <option value=\"true\">true</option>\r\n            <option value=\"false\">false</option>\r\n          </Form.Control>)\r\n        }\r\n        {+type !== DataType.BOOL && (\r\n          <>\r\n            <Form.Control value={value} onChange={e => setValue(e.target.value)} name=\"value\" type=\"text\" placeholder=\"Value\" isInvalid={!valueFb.valid} />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {valueFb.message}\r\n            </Form.Control.Feedback>\r\n          </>\r\n        )}\r\n      </FormGroup>\r\n\r\n\r\n      <Button variant=\"primary\" type=\"button\" onClick={onClick}>\r\n        Declare\r\n      </Button>\r\n    </Form>\r\n  )\r\n}","export function toByteString(value) {\r\n    const buffer = new ArrayBuffer(1);\r\n    const arr = new Uint8Array(buffer);\r\n    arr[0] = +value;\r\n    const normValue = arr[0];\r\n    return normValue.toString(2).padStart(8, '0');\r\n}","import React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { DataType } from \"../memsym/data-type\";\r\nimport { MemContext } from \"./memcontext\";\r\nimport { toByteString } from '../memsym/utils';\r\n\r\nexport class StackView extends React.Component {\r\n    render() {\r\n        return (\r\n            <MemContext.Consumer>\r\n                {this.renderBody}\r\n            </MemContext.Consumer>\r\n        );\r\n    }\r\n\r\n    renderBody = ({ records }) => {\r\n        return (\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>bin</th>\r\n                        <th>value</th>\r\n                        <th>label</th>\r\n                        <th>type</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {records.map((r, i) => (\r\n                        <tr key={i}>\r\n                            <td>{i}</td>\r\n                            <td>{this.renderBin(r.dataType, r.value)}</td>\r\n                            <td>{r.value}</td>\r\n                            <td>{r.label}</td>\r\n                            <td>{this.renderType(r.dataType)}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    renderBin = (dataType, value) => {\r\n        if (dataType === DataType.CHAR) {\r\n            value = value.charCodeAt(0);\r\n        }\r\n        if (dataType === DataType.BOOL) {\r\n            value = value === \"true\" ? 1 : 0;\r\n        }\r\n        return toByteString(value);\r\n    }\r\n\r\n    renderType = (type) => {\r\n        switch (+type) {\r\n            case DataType.INT:\r\n                return 'int';\r\n            case DataType.BOOL:\r\n                return 'bool';\r\n            case DataType.CHAR:\r\n                return 'char';\r\n            case DataType.STRING:\r\n                return 'string';\r\n            case DataType.NULL:\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n\r\n}","export class Record {\r\n    constructor(dataType, label, value) {\r\n        this.dataType = dataType;\r\n        this.label = label;\r\n        this.value = value;\r\n    }\r\n}","import { DataType } from \"./data-type\";\r\nimport { Record } from \"./record\";\r\n\r\nexport class Stack {\r\n    #records;\r\n\r\n    constructor(size = 8) {\r\n        const records = [];\r\n        for (let i = 0; i < size; i++) {\r\n            records.push(new Record(DataType.NULL, null, 0));\r\n        }\r\n        this.#records = records;\r\n    }\r\n\r\n    get records() { \r\n        return [...this.#records]\r\n    }\r\n\r\n    push(record) {\r\n        let index = 0;\r\n        let found = false;\r\n        const records = this.#records;\r\n\r\n        while (!found && index < records.length) {\r\n            if (records[index].dataType === DataType.NULL) {\r\n                found = true;\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n        if (!found) {\r\n            records.push(record);\r\n        } else {\r\n            records[index] = record;\r\n        }\r\n    }\r\n}","export class Heap {\r\n    // printable chars /[\\x00-\\x08\\x0E-\\x1F]/.test(data)\r\n    #memory;\r\n\r\n    constructor(size = 64) {\r\n        this.size = size;\r\n        this.#memory = Array(size).fill(0);\r\n    }\r\n\r\n    get data() {\r\n        return [...this.#memory];\r\n    }\r\n\r\n    read(index) {\r\n        const mem = this.#memory;\r\n        if (index >= mem.length) {\r\n            return '';\r\n        }\r\n        if (mem[index] === 0) {\r\n            return '.';\r\n        }\r\n        const result = [];        \r\n        let i = 0;\r\n        while (i + index < mem.length && mem[i + index] !== 0) {\r\n            result[i] = mem[i + index];\r\n            i++;\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    alloc(value) {\r\n        if (typeof value !== \"string\") {\r\n            alert('Unable to allocate non-string value');\r\n            return;\r\n        }\r\n        const length = value.length;\r\n        if (!length) {\r\n            return -1;\r\n        }\r\n        const mem = this.#memory;\r\n        const index = this.findFreeIndex(length);\r\n        if (index === -1) {\r\n            return -1;\r\n        }\r\n        for (let i = 0; i < length; i++) {\r\n            mem[i + index] = value[i];\r\n        }\r\n        return index;\r\n    }\r\n\r\n    findFreeIndex(length) {\r\n        let i = 0;\r\n        const mem = this.#memory;\r\n        while (i < this.size) {\r\n            let current = i;\r\n            if (mem[i] === 0) {\r\n                while (current < this.size && current - i < length && mem[current] === 0) {\r\n                    current++;\r\n                }\r\n                if (current === this.size) {\r\n                    return -1;\r\n                }\r\n                if (current - i < length || mem[current] !== 0) {\r\n                    i = current + 1;\r\n                    continue;\r\n                }                \r\n                return i > 0 ? i + 1 : i;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n}","import { DataType } from \"./data-type\";\r\nimport { Record } from \"./record\";\r\nimport { Stack } from \"./stack\";\r\nimport { Heap } from \"./heap\";\r\n\r\nexport class MemSym {\r\n    #stack;\r\n\r\n    #heap;\r\n\r\n    constructor() {\r\n        this.#stack = new Stack();\r\n        this.#heap = new Heap();\r\n    }\r\n\r\n    declare(dataType, label, value) {\r\n        if (+dataType === DataType.CHAR) {\r\n            value = value[0];\r\n        }\r\n        if (+dataType === DataType.STRING) {\r\n            value = this.#heap.alloc(value);\r\n            if (value === -1) {\r\n                alert('failed to alloc value');\r\n                return;\r\n            }\r\n        }\r\n\r\n        const record = new Record(+dataType, label, value);\r\n\r\n        this.#stack.push(record);\r\n        console.log('var declared: ', record);\r\n        console.log(this.records);\r\n    }\r\n\r\n    get records() {\r\n        return this.#stack.records;\r\n    }\r\n\r\n    get heapData() {\r\n        return this.#heap.data;\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/logo_memsym.482cc514.svg\";","import React from \"react\";\r\nimport { Table, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { MemContext } from './memcontext';\r\n\r\nconst colsCount = 8;\r\n\r\nexport class HeapView extends React.Component {\r\n    render() {\r\n        return (\r\n            <MemContext.Consumer>\r\n                {this.renderBody}\r\n            </MemContext.Consumer>\r\n        )\r\n    }\r\n\r\n    renderBody = ({ heapData }) => {\r\n        const rowsCount = Math.floor(heapData.length / colsCount);\r\n        const rows = this.to2DimArray(heapData, rowsCount, colsCount);\r\n        const header = Array.from(Array(colsCount).keys()).map(x => x.toString(2).padStart(3, '0'));\r\n        return (\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#/#</th>\r\n                        {header.map(x => (<th key={x}>{x}</th>))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows.map((r, i) => (\r\n                        <tr key={i}>\r\n                            {r.map((c, i) => this.renderCell(c, i))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    renderCell(value, index) {\r\n        if (index === 0) {\r\n            return (\r\n                <td key={index} className=\"bold\">{this.renderCellValue(value, index)}</td>\r\n            )\r\n        }\r\n        const tooltipValue = typeof value === 'string' ? `'${value}'` : value;\r\n\r\n        return (\r\n            <OverlayTrigger overlay={<Tooltip>{tooltipValue}</Tooltip>}>\r\n                <td key={index} >{this.renderCellValue(value, index)}</td>\r\n            </OverlayTrigger>\r\n        )\r\n    }\r\n\r\n    renderCellValue(value, index) {\r\n        if (index === 0) {\r\n            return value.toString(2).padStart(3, '0');\r\n        }\r\n        if (typeof value === 'string') {\r\n            value = value.charCodeAt(0);\r\n        }\r\n        return value.toString(2).padStart(8, '0');\r\n    }\r\n\r\n    to2DimArray(data, rowsCount, colsCount) {\r\n        const rows = [];\r\n        for (let row = 0; row < rowsCount; row++) {\r\n            const cols = [];\r\n            cols.push(row);\r\n            for (let col = 0; col < colsCount; col++) {\r\n                const item = data[row * colsCount + col];\r\n                cols.push(item);\r\n            }\r\n            rows.push(cols);\r\n        }\r\n        return rows;\r\n    }\r\n}","import './App.css';\r\nimport { MemProvider } from './components/memcontext';\r\nimport { RecordForm } from './components/form';\r\nimport { StackView } from './components/stackView';\r\nimport { Container, Row, Col, Card, Navbar } from 'react-bootstrap';\r\nimport { MemSym } from './memsym/memsym';\r\nimport packageJson from '../package.json';\r\nimport Logo from './logo_memsym.svg';\r\nimport { HeapView } from './components/heapView';\r\n\r\nconst memsym = new MemSym();\r\n\r\nfunction App() {\r\n  return (\r\n    <MemProvider memsym={memsym}>\r\n      <Container>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand><img\r\n            alt=\"\"\r\n            src={Logo}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n          />{' '} MemSym</Navbar.Brand>\r\n          <Navbar.Text>\r\n            v{packageJson.version}\r\n          </Navbar.Text>\r\n        </Navbar>\r\n        <Row>\r\n          <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\">\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title>\r\n                  Declare variable\r\n                </Card.Title>\r\n                <RecordForm />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs=\"12\" sm=\"12\" md=\"8\" lg=\"5\">\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title>\r\n                  Stack\r\n                </Card.Title>\r\n                <StackView />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title>Heap</Card.Title>\r\n                <Card.Text>hover over a cell to see the value</Card.Text>\r\n                <HeapView />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </MemProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}