{"version":3,"sources":["components/memcontext.js","memsym/data-type.js","components/form.js","memsym/utils.js","components/stackView.js","memsym/record.js","memsym/stack.js","memsym/memsym.js","App.js","reportWebVitals.js","index.js"],"names":["MemContext","React","createContext","MemProvider","memsym","children","useState","setX","Provider","value","records","onUpdate","x","DataType","useFeedback","valid","setValid","message","setMessage","setError","RecordForm","name","setName","type","setType","setValue","useContext","nameFb","valueFb","Form","FormGroup","Label","Control","onChange","e","target","placeholder","isInvalid","Feedback","as","Button","variant","onClick","actual","nameIsOk","find","label","checkIfNameExists","match","valueIsOk","length","declare","toByteString","buffer","ArrayBuffer","arr","Uint8Array","toString","padStart","StackView","renderBody","Table","bordered","map","r","i","renderBin","dataType","renderType","charCodeAt","Consumer","this","Component","Record","Stack","size","push","record","index","found","MemSym","console","log","App","Container","Navbar","bg","Brand","Text","packageJson","version","Row","Col","xs","sm","md","lg","Card","Body","Title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.950cb295.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport const MemContext = React.createContext();\r\n\r\nexport function MemProvider({ memsym, children }) {\r\n    const [, setX] = useState(0);\r\n\r\n    const onUpdate = () => {\r\n        setX(x => x > 0 ? 0 : 1);\r\n    }\r\n\r\n    return (\r\n        <MemContext.Provider value={{memsym, records: memsym.records, onUpdate}}>\r\n            {children}\r\n        </MemContext.Provider>\r\n    );\r\n}","export const DataType = {\r\n    NULL: 0,\r\n    INT: 1,\r\n    BOOL: 2,\r\n    CHAR: 3,\r\n    STRING: 4,    \r\n}","import { useState, useContext } from \"react\"\r\nimport { Form, Button, FormGroup } from \"react-bootstrap\";\r\nimport { DataType } from \"../memsym/data-type\";\r\nimport { MemContext } from \"./memcontext\";\r\n\r\nfunction useFeedback() {\r\n  const [valid, setValid] = useState(true);\r\n  const [message, setMessage] = useState('');\r\n  const setError = message => {\r\n    setValid(!message);\r\n    setMessage(message);\r\n  };\r\n\r\n  return {\r\n    valid,\r\n    message,\r\n    setError\r\n  }\r\n}\r\n\r\nfunction checkIfNameExists(memsym, name) {\r\n  return !!memsym.records.find(x => x.label === name);\r\n}\r\n\r\nexport const RecordForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [type, setType] = useState(DataType.INT);\r\n  const [value, setValue] = useState(0);\r\n\r\n  const { memsym, onUpdate } = useContext(MemContext);\r\n\r\n  const nameFb = useFeedback();\r\n  const valueFb = useFeedback();\r\n\r\n  const onClick = () => {\r\n    let actual = value;\r\n    if (+type === DataType.BOOL && !(value === \"true\" || value === \"false\")) {\r\n      actual = \"true\";\r\n    }\r\n\r\n    let nameIsOk = true;\r\n    if (!name) {\r\n      nameFb.setError('Label is required');\r\n      nameIsOk = false;\r\n    }\r\n    if (nameIsOk && checkIfNameExists(memsym, name)) {\r\n      nameFb.setError('Label is already defined');\r\n      nameIsOk = false;\r\n    }\r\n    if (nameIsOk && !name.match(/^[_a-zA-Z][_a-zA-Z0-9]*$/)) {\r\n      nameFb.setError(\"Label must start with '_' or letter (a-z, A-Z) and be following by '_' or letters (a-z, A-Z) or numbers (0-9)\");\r\n      nameIsOk = false;\r\n    }\r\n    if (nameIsOk) {\r\n      nameFb.setError('');\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    let valueIsOk = true;\r\n    if (actual !== 0 && !actual) {\r\n      valueFb.setError('Value is required');\r\n      valueIsOk = false;\r\n    }\r\n    if (valueIsOk && +type === DataType.INT && (actual < -128 || actual > 127)) {\r\n      valueFb.setError('Value must be in range [-128; 127]');\r\n      valueIsOk = false;\r\n    }\r\n    if (valueIsOk && +type === DataType.CHAR && actual.length > 1) {\r\n      valueFb.setError('Value must be only 1 character long');\r\n      valueIsOk = false;\r\n    }\r\n    if (valueIsOk) {\r\n      valueFb.setError('');\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    memsym.declare(type, name, actual);\r\n    onUpdate();\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <FormGroup>\r\n        <Form.Label>Label</Form.Label>\r\n        <Form.Control value={name} onChange={e => setName(e.target.value)} name=\"name\" type=\"text\" placeholder=\"Label\" isInvalid={!nameFb.valid} />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {nameFb.message}\r\n        </Form.Control.Feedback>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Form.Label>Type</Form.Label>\r\n        <Form.Control as=\"select\" name=\"type\" value={type} onChange={(e => setType(e.target.value))}>\r\n          <option value={DataType.INT}>int</option>\r\n          <option value={DataType.CHAR}>char</option>\r\n          <option value={DataType.BOOL}>bool</option>\r\n          {/* <option value={DataType.STRING}>string</option> */}\r\n        </Form.Control>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Form.Label>Value</Form.Label>\r\n        {+type === DataType.BOOL && (\r\n          <Form.Control as=\"select\" name=\"value\" value={value} onChange={(e => setValue(e.target.value))}>\r\n            <option value=\"true\">true</option>\r\n            <option value=\"false\">false</option>\r\n          </Form.Control>)\r\n        }\r\n        {+type !== DataType.BOOL && (\r\n          <>\r\n            <Form.Control value={value} onChange={e => setValue(e.target.value)} name=\"value\" type=\"text\" placeholder=\"Value\" isInvalid={!valueFb.valid} />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {valueFb.message}\r\n            </Form.Control.Feedback>\r\n          </>\r\n        )}\r\n      </FormGroup>\r\n\r\n\r\n      <Button variant=\"primary\" type=\"button\" onClick={onClick}>\r\n        Declare\r\n      </Button>\r\n    </Form>\r\n  )\r\n}","export function toByteString(value) {\r\n    const buffer = new ArrayBuffer(1);\r\n    const arr = new Uint8Array(buffer);\r\n    arr[0] = +value;\r\n    const normValue = arr[0];\r\n    return normValue.toString(2).padStart(8, '0');\r\n}","import React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { DataType } from \"../memsym/data-type\";\r\nimport { MemContext } from \"./memcontext\";\r\nimport { toByteString } from '../memsym/utils';\r\n\r\nexport class StackView extends React.Component {\r\n    render() {\r\n        return (\r\n            <MemContext.Consumer>\r\n                {this.renderBody}\r\n            </MemContext.Consumer>\r\n        );\r\n    }\r\n\r\n    renderBody = ({ records }) => {\r\n        return (\r\n            <Table bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>bin</th>\r\n                        <th>value</th>\r\n                        <th>label</th>\r\n                        <th>type</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {records.map((r, i) => (\r\n                        <tr key={i}>\r\n                            <td>{i}</td>\r\n                            <td>{this.renderBin(r.dataType, r.value)}</td>\r\n                            <td>{r.value}</td>\r\n                            <td>{r.label}</td>\r\n                            <td>{this.renderType(r.dataType)}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    renderBin = (dataType, value) => {\r\n        if (dataType === DataType.CHAR) {\r\n            value = value.charCodeAt(0);\r\n        }\r\n        if (dataType === DataType.BOOL) {\r\n            value = value === \"true\" ? 1 : 0;\r\n        }\r\n        return toByteString(value);\r\n    }\r\n\r\n    renderType = (type) => {\r\n        switch (+type) {\r\n            case DataType.INT:\r\n                return 'int';\r\n            case DataType.BOOL:\r\n                return 'bool';\r\n            case DataType.CHAR:\r\n                return 'char';\r\n            case DataType.STRING:\r\n                return 'string';\r\n            case DataType.NULL:\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n\r\n}","export class Record {\r\n    constructor(dataType, label, value) {\r\n        this.dataType = dataType;\r\n        this.label = label;\r\n        this.value = value;\r\n    }\r\n}","import { DataType } from \"./data-type\";\r\nimport { Record } from \"./record\";\r\n\r\nexport class Stack {\r\n    #records;\r\n\r\n    constructor(size = 8) {\r\n        const records = [];\r\n        for (let i = 0; i < size; i++) {\r\n            records.push(new Record(DataType.NULL, null, 0));\r\n        }\r\n        this.#records = records;\r\n    }\r\n\r\n    get records() { \r\n        return [...this.#records]\r\n    }\r\n\r\n    push(record) {\r\n        let index = 0;\r\n        let found = false;\r\n        const records = this.#records;\r\n\r\n        while (!found && index < records.length) {\r\n            if (records[index].dataType === DataType.NULL) {\r\n                found = true;\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n        if (!found) {\r\n            records.push(record);\r\n        } else {\r\n            records[index] = record;\r\n        }\r\n    }\r\n}","import { DataType } from \"./data-type\";\r\nimport { Record } from \"./record\";\r\nimport { Stack } from \"./stack\";\r\n\r\nexport class MemSym {\r\n    #stack;\r\n\r\n    constructor() {\r\n        this.#stack = new Stack();        \r\n    }\r\n\r\n    declare(dataType, label, value) {\r\n        if (+dataType == DataType.CHAR) {\r\n            value = value[0];\r\n        }\r\n\r\n        const record = new Record(+dataType, label, value);\r\n        this.#stack.push(record);\r\n        console.log('var declared: ', record);\r\n        console.log(this.records);\r\n    }\r\n\r\n    get records() {\r\n        return this.#stack.records;\r\n    }\r\n}","import './App.css';\r\nimport { MemProvider } from './components/memcontext';\r\nimport { RecordForm } from './components/form';\r\nimport { StackView } from './components/stackView';\r\nimport { Container, Row, Col, Card, Navbar } from 'react-bootstrap';\r\nimport { MemSym } from './memsym/memsym';\r\nimport packageJson from '../package.json';\r\n\r\nconst memsym = new MemSym();\r\n\r\nfunction App() {\r\n  return (\r\n    <MemProvider memsym={memsym}>\r\n      <Container>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand>MemSym</Navbar.Brand>\r\n          <Navbar.Text>\r\n            v{packageJson.version}\r\n          </Navbar.Text>\r\n        </Navbar>\r\n        <Row>\r\n          <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\">\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title>\r\n                  Declare variable\r\n                </Card.Title>\r\n                <Card.Body>\r\n                  <RecordForm />\r\n                </Card.Body>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs=\"12\" sm=\"12\" md=\"8\" lg=\"5\">\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title>\r\n                  Stack\r\n                </Card.Title>\r\n                <Card.Body>\r\n                  <StackView records={memsym.records} />\r\n                </Card.Body>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </MemProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}